{"noir_version":"1.0.0-beta.1+74f0a50ed44e5712","name":"RockPaperScissors","functions":[{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_addr","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"timeout_blocks","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["constructor"]},{"name":"timeout_game","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"game_id","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2169137763093847922":{"error_kind":"string","string":"Player 2 hasn't played yet"},"2701317986746916850":{"error_kind":"string","string":"Game already completed"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"15733354797221546546":{"error_kind":"string","string":"Not enough blocks have passed for timeout"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["timeout_game"]},{"name":"get_game_id_by_index","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"index","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"7d3dTuM4FAfwd+l1L+zjj2PzKqMR4qODKlUtKrDSCvHum7AkhdrryD6ZUdn8b0Z06hOf/pykPoHEr6v7ze3Lw/V2/+vwtLr68braHe5unreHfffq9W29uj1ud7vtw/Xn/16p/h9t3ts/Pd7s+5dPzzfH59WV9lGtV5v9ffcjK9Vt4dd2t1ldefP2c73StiHGNcT4hhhuiAkNMbE+hlRDjG6IoYaYhv2AGvYDqt0P1mljpdzQWJEbG0fKNLYmhI/G1kQeG3Nuy0GbYctBO/25cZ+6nyH1QEPjLvc/lzrPkLrVo7qfUNfODKlrF2059Ug0bDmSt+eph1lT1+pL6n0H8Td3YNTv7iB7jggUhphgJjvQKo4duDg21lbnWgc/NI5hbEvM79nQRWVjLiobe1HZuIvKxl9UNnxR2YSLyiZeUjZWXVQ2f/xc7IZs6NOEos8mM0k4fdMG8qctk42Z1mbcsqVTyuQzTYnUsOGui1hu7Iz5aOuM/dy05yPwSfgM+CR8FnwSPgc+CZ8Hn4SPwSfhC+CT8EXwCficAp+ED1WHiA9Vh4gPVYeIz4JPwoeqY5LP88Dnwzkfqg4RH6oOER+qjik+P7b1X5v2fKg6JHweVYeID1WHiA9Vh4gPVYeIz4JPwoeqQ8SHqkPEh6pDxIeqQ8SHqkPCx6g6RHyoOkR8qDpSE5QSqYmFSWKCSX9qgpl8aoLpeWqCOXdqgol0YhIwO05NMOVNTTCPTU0wj01NLEwSE8xjUxPMY1MTzGNTE8xjUxPMYxOTiHlsarLQc6w9mTg6N1nmscM0ZsG2vXEHqNUyj7QaQe15fNiIDyERXGZ9OafgMqvROQWXWbvOKWghOCXIYbiRRAdFieAy6+I5BZc5w5tTcJk195yCy6zQ5xRETSIU1KhJpIKoSaSCqEmkgqhJpIIWgkJB1CRSQdQkUkHUJFJB1CRSQdQkQkFCTTIpGPX4+aJJBVGTSAVRk0gFZ6hJyNihB4p6SlD7kzfHiU0rPXzS7jc65tOmw7/Z22+dvfvW2ftvnf30HFRTuQsif/pDjOC/dJG2ZhoTYjITy6+wUsNDjlhZX27cXaHm8YtaRfWlef9ZzTLPkkYPKmRIn5/4zDIvxkygWKCkKMu8ZDKBssyrIBMoy7ywMYGyzGsVEyj5VcIUnSYt7Mo9/P//zjXGUVAnhUt+nR4IVgjm14LsZE+fM0CwJEgQFAoaCAoFLQSFgvk1ZDWf1laN+CYpCuYXVbXjRYzuR+yDRcEIQZlgfskXCFYIaggKBfPzQWfG72LnGIIlQQNBoaCFoFDQQVAo6CEoFGQICgUDBIWCEYIywfyCMBCsENQQFAqiJpEKoiaRCloICgVRk0gFUZNIBf+jJuHxc7oYIVgSDBAUCkYIygRZQVAomJ9Rm9N9Fsbg9yRFQQNBoaCFoFDQQVAo6CEoFGQICgUDBIWCEYIywfwSMxCsENQQFAqiJpEKoiaRCtq8oBvv8TYeV1iLgg6CQkEPQaEgQ1AoGCAoFIwQlAlGBUGhIO6GkAoSBIWCBoJCQQtBoeBCF1kroyx0JcsyykKXsiyjLHQtyxIK5R8AzXbYPjt1HpJ/2my0QzfRJ73kH69aDqH6EFMfYisfXfMe5FqCfEsQtwSFlqDYEGRUS5BuCaKWINMS1LJHmJY9wrTsEaZljzAte4Rp2SPyDzIqnk7yT+6JejgdRpOGuPoQXx/C9SGhPiRWn7Rc/QnY1Z+AXf0J2NWfgPP3SJdDXH1IfvT9sFtGjkkI14eE+pBYHZK/k60coutDqD5kavQzIfWj7+tHP3+/QTmE60NCfUj9sc/1xz7XH/tcf+xz/bHP9aPP9aPP9aPP9aPP9aMf6ocy1A9lqB/KUDmUb92rv26O25vb3eapi+jffNnfPW8P+4+Xz38/Du/cHre73fbh+vF4uNvcvxw317vDXf/eSn3884MirY02P/v1CvuXitakuH/Zf3yjbfeu73rtev4H","brillig_names":["get_game_id_by_index"]},{"name":"resolve_game","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"game_id","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"1705275289401561847":{"error_kind":"string","string":"Mismatch note header storage slot."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6869395374906889440":{"error_kind":"string","string":"Mismatch note header contract address."},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"11091894166229312484":{"error_kind":"fmtstring","length":20,"item_types":[]},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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","brillig_names":["get_note_internal","decompose_hint","get_public_keys_and_partial_address","lte_hint","get_key_validation_request","notify_nullified_note_oracle_wrapper","notify_created_note_oracle_wrapper","debug_log_oracle_wrapper","pack_arguments_oracle_wrapper","enqueue_public_function_call_internal","directive_invert","directive_integer_quotient"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2169137763093847922":{"error_kind":"string","string":"Player 2 hasn't played yet"},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"2701317986746916850":{"error_kind":"string","string":"Game already completed"},"3295174574362609801":{"error_kind":"string","string":"Only owner can set timeout blocks"},"4255801969160781417":{"error_kind":"string","string":"Function _add_game can only be called internally"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"8032895601730151160":{"error_kind":"string","string":"Function _resolve_game can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"15733354797221546546":{"error_kind":"string","string":"Not enough blocks have passed for timeout"},"16541607464495309456":{"error_kind":"fmtstring","length":16,"item_types":[]},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"]},{"name":"start_game","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"game_id","type":{"kind":"field"},"visibility":"private"},{"name":"player1_move","type":{"kind":"field"},"visibility":"private"},{"name":"bet_amount","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2429784973622283587":{"error_kind":"string","string":"Can only emit a note log for an existing note."},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3151558035338938026":{"error_kind":"fmtstring","length":75,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"3478708872465429459":{"error_kind":"string","string":"Invalid move!"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8193989641828211937":{"error_kind":"string","string":"ciphertext length mismatch"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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","brillig_names":["random","decompose_hint","notify_created_note_oracle_wrapper","debug_log_oracle_wrapper","compute_payload_unconstrained","pack_arguments_oracle_wrapper","enqueue_public_function_call_internal","directive_integer_quotient","directive_invert"]},{"name":"set_timeout_blocks","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"new_timeout","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"3295174574362609801":{"error_kind":"string","string":"Only owner can set timeout blocks"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/71VTUvDQBBN0wSNVZSqIHhRELxuTGzTW0W8KujB8za7K4FqJa3isT/dLsyS7XTTWLPpQJj9ypt5byabllNYC7yH5o7hzBA8qWehRSyylOQ6EmWkrsEH4F1tv22RdIDi2sRPSBwHBn4W848CwGxSH4XZAD7ZAZz7eYGPuUg7gLneQ+qd3cXTgbUAnWuing3qTY4N+atYkuc5jPcXzxGM6ff702c6YfyOsZxPp7pGONd1tglmewPMM4z5+DUeZyLj+cNPNp2tYJvuCzV20Zpbkpe+rpupftKG4Ek9C33EoQte1u5S0+QQa/LCPxjP/1s6/JlapNST6Z6spDub5PSNP3PK/lI+PK9qIX3fN2jhoT11VrWalPsKaePa16YvtTkt0eY1z2bcQVbVv6Y+163jFP9Eb168Z+sO6ieEqBzagO87y43loPg+On8B8z2Nl/JejTxFn4YiooLeUsbilHYRvq5bp4H4Ix7ySAgRcRqLnth6/Bs2oqlgYThIkzhJBlXxfwE2QNavUQoAAA==","debug_symbols":"5VbbioMwEP2XPPuQuWSS9FeWpdjWFkG0WLuwlP77xqUJ1hWF0u5LX8TImZkzM2fiXNSu2JwP67LeNye1+rioqtnmXdnU4XS5ZmrTllVVHtbDz0r3D8Bf/OmY1/3x1OVtp1YgXmeqqHfh1WodPOzLqlAroWv2F6y1iWCNJoE9ToCZnLuBmbxNYDvl2QFFzw4MDMGfmQJ6AnWHERy4/x91fgJ1hlR1Wag6GIrUwXiep+4Ro2ePwmPq5qnUQd9R7wPIqwPYVwdwUwFQe7nZIADPB2BjKGrNCCxoDXVUsUOw44b5STaAOrEhN88GUWK6iE4SGNhNoC1CTNQiLcxJKLWNYM0yDw7jaimJ3msZpYr6fVKFRY3xnYh7G3zAhh6w4ek2pOszXDCyMGCs04Ax2kEb/FRlJTXNiqOFNrDEwloDvNQGf/eHoHEbzJukeg2nr7wt801V3JaK/bneDnaM7vtYjNaNY9tsi925LfrFY7Bz9GOKNiPsr6deyCQZuRAjxPkB","brillig_names":["set_timeout_blocks"]},{"name":"play_game","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"game_id","type":{"kind":"field"},"visibility":"private"},{"name":"player2_move","type":{"kind":"field"},"visibility":"private"},{"name":"bet_match","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["play_game"]},{"name":"get_games_length","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7VUbUvDMBBOX4bWOZApIij4F1Jb3T5OxK8K+gvikkhhMmmn+HE/3RQuyy1L90LTB8Jdk+tzd096DYhBADYm6wiIY8MOagxGe7dgE7AhOo/UmsAzbYc0sfL65B/TPE8c/XmsP0uAM+iGn2r+jvSnR8DztDT8uBed91itPviDLe90Wa+6z5XeUQf8Cul5Q/1ag0vwT9U6A5/9fr1+T+dcPHJeiqrCc2XruQ2HcIYHcF7ZnC8/s1khC1E+/xXVYoM7cnBrPyTu3uy6cByGa15qTMDSdkh7Vg9DsPXd3TTU4DH/Xa33BXCt9H5fzEv2Kd4E4/ve477f0IA0z2yfmP93vDTnvuZlNKZU542Av0eM9hgxOsfx1/B8gurXNm5RpxyxVGZMsnvGeT5lQ4ufWDr5zv8hUpFJKTPBcvkgd+b/ByydXCTdBwAA","debug_symbols":"5ZTLaoUwEIbfJWsXmUnMxVc5lIOXeAiIipdCEd+9STHWWjluPN10Exz5mP/PMPknUphsfNxtXTY9SW4TqZo8HWxTu2qaI5J1tqrs4779Tag/AL/4vk1rX/ZD2g0kAaFpRExduE9JqetQ2sqQRLA5+g1TGgeYYrzCGg9gzpRaYM60XGF51FkBC50VxLCF3yIC7ALrCgPsvP+ddX6BdQ7r1MXJ1CFmwTrEmj+3rhFDZ42C763Hl1oH+sO6FxCvFpCvFlBHAoppHTaCIz8RQJBBAPn3YgLXB7REEAstkZ1sprtcaC0pF89h90AkW9dMU7HfBv1Prjq76j3tbJpVZgnVcqzzTcYOH63ZxW3bNbkpxs744N1krjtviBFKP0HwhYoYdRpO5xM=","brillig_names":["get_games_length"]},{"name":"_add_game","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"game_note","type":{"kind":"struct","path":"game_note::GameNote","fields":[{"name":"id","type":{"kind":"field"}},{"name":"bet_amount","type":{"kind":"field"}},{"name":"is_completed","type":{"kind":"boolean"}},{"name":"blocktime","type":{"kind":"field"}},{"name":"player2_address","type":{"kind":"field"}},{"name":"player2_move","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"4255801969160781417":{"error_kind":"string","string":"Function _add_game can only be called internally"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+1dzYtkVxV/r766q/qjqnsmkzEfGyVCNMKrr67qXUtMVJAoycKFuKjueiWDYxI6kxBFtAQR9+IiuHARF4KbgOBOBcWV4D/gQsSFuBBB0IWgOLfzTtevf/V7t6u63q2eCXOheVV1zjtf99xzzzv33tdx9H6r3f+Ls8+V7LoRzTfDOcquyWqtXSCtJKSc8UMiZ+khkbP8kMhZeUjkrD4kctZCyOmEVEHL/e4GRDmDOyPVovxmyj5Xfv9az76XAF6g47brxLdI+sOkN6oL/QqUv1vPaG6GoT8w+vUw9BPzleenM/qoi/HN3CF6cTqz5Ytwj2s72ed4hnJO12AlgH2KYGWAvUCwSjTP12BVgH2aYOjrnyEYjpPPZjCn+372m9k+pG+iTYru2xtCfuPl9PxEfNEeOFbinGsUzfoJfyuRzRqEc1SQTq1ofjwYrx36XoQeWwA7KlgHtNEW6bBdoA47xevQaZGcyMf91so+j9762udfP3ltnH5yPD5N33gjJr12hfyqLUOzuQTN20zzpTfv3r0zuZOevvD2nTfuzdFuCdr2uRRp3VguxMNWj7RNjrJrslo7S5BQh2eyq4sF3Xhmkybb5JX01XF6+iB1XUSqVIVMTYIZ7seyq1P7ANS+yTK+cu+109FX0pfT0XhR3RlvJwevTjK6dpRdk9Vam20TeWzj9H4sR+8vnt65l5Lccz6+Q99bAk8pHiAm9Y32HshT3Hza7lhs3hd6GeyGsI3BbgLMN3jK9B11ck57CPM247E8GK9MtnB90E3rQtcC+6Bvej0WzTeD3QLe3AePA6xOsNsA45ziQwDbJtgTAFPzgzXVr2Yn169/XqJf0X9uEQz9/3GC7QPsNsHQd03fEL7SPT4cnYzef3hVgQqDpsm0bIDOC7yLzOcIN55VQXeLYIb7uezq+vRmFghDjbnxfd1XDuJ5HZAXxFdmeIO+ly5hGHDW6NWjee8vMGL1OPpj42imItYtYadFo4vptMqsYbIFnDVOjDZG5wL7YMgRPhI6Y4TnPsAIz7PGkwDjWeMpgPGs8TTAlp01zE7Lzhoqwqvs5AmCoX8+STD0z6dAZrSV+1wR8lSEvKqCUGRFLSZ+Ji/+hvwbJGvB8pwtqyA/tB/ap0S22xayqqdyjBkIQz7bgo+iVS6QVr1AWtUCadUKpGUVxtCVvrqwQ9FVerZNgfQPzKex8my2cjy/RX1idq1Cn2yKPqwS/tPxjOZ3st+WzSwxDkQEw895pYxlyiG1HBrcAq9CJIFjctf6FSvQql95fuWVLnU1WgwzXg2iFSq+K91Qfo4jGB/RBnm06kvSCryydN6nmx69kX9T6LpBeitamx69N9av93ms3A5sV5UvoE6cb6Kdlh0rnAsFijPeXMjXzxiXOK9QtBpL0npQ45+SVekRr0ePE7V6FZHMWEHhnBarWhsEw/m0SjB8fkJ7cVPPUmYLd9/jpRldxmM9cHzw8yL6oOnUjPJjH+c1JusycwTnmqHG6HXGN9SJ49squQDHt9C5gNLN1884XjkXWCW+8ZwYOr5dlgv44tumR4/aevRYOr7FBMP4xnWkReMb2otbkfENnz04vqEPcnzDccW+yuOQf2Nf5fsvo1UTtEz28nReLuuDCsCKHO+OzxfA5ti3rlWnF2EYA2rTi7bgmORak74j/ZhgaKeysFNL3F9egJbqP2Vzo3sdNke/uKrNbbVH+TnXjJb1c75/nXzq4r6j7JpcsQ373c7gYHI+31WFnMoHld9gbHetArCi/eb75DfoG+w3OJex36i4pfqTn2+X7c8NwcfXn93koNdLB5203W2Pks7h8bCf9PrHB8P2sN0f9sedYbebDnvDweHx4SA5bPe6aXvSP+xOMiOpnZrMN1CNsBsTvyjSuZzxb0TzMSxELlcjeXy+zb5h9y4y3y1b+1h27lQyG+6itStVw1nTM3TH1x9qt6jL4SzenNdhnx/dvYvG4Zsj+lwhQ8VkEIPxQlcV8HjQbObQxqYWys2gJYHvlLVFw3NlX07vvXn66nh0b/TKnW+krJ4ab+wn1nzreUZLPduq9S3zITTJmp5tO775StUSLzHr86+9/nX2hDKoi6xQZXWP6lXG4++xhx5+DmzWrs8FlOcvGuqN3rqWaFUIVi6sQjCnXquEc6PF07HiUwYevlCv0pO86IYyxx6ZVQSzJTmLqrczgJN7P76Ir0K5L2SosWS+Haik0/HZRoUwucH65fSt9PReRO2y0IFdVfXco0KHE+02mRsnNXYVDC9Vwn8q+2CmDjQME9y7GBGvrcgfqdEmfM4Fd7DwTBMoWzkw+22DTX0V/yrhfyQzgsP9dWmGj/dEkX/YsAyIrypvqoJt9668JZA7ZUPgRYSDeCg8GpDLIcanloOPWwsQ/+Ng8N/QY6K6H7cthHx0HQyTxAaEPTabM3GrABzxOxkBPrRljnN0RTkng1F70h1NRv3ReNw7GfEAds36dysA/+O0nXYnk0k3HfUmB5O18+8eJ/d17w+O0+7JID04vIy/OpTn2yIXaLvPwo/axn9d+ZdKy31b5GpCVl8pzJd3qNKyomWwEGU1a+ow7Zp8o3dV3wi09c3rG2ifB8E3QtBSuS9P8Mo2VQ8fvL+6Zj51cd9Rdk2Wax3+QS0H8LgJ9JzQX3Tc8DNtoHJq25c/5S2j5eU66y5fPii0eGwgbR4bseATe/jw/a7tiPvinKvxiS7ho2RuChk49pSEPiUPHzVH+uaxq+qjZFZLr1flE3iZI1HLsKzHVbe6KD245nZUsB7XuQUz1HYWfjlEwfQ7vrqeu34znv3u/lQRAe/lg4qG/048o/nt7LPaUsDLjJZzc75vnzeJn+F9N+MR+qU2qlDEy1CBlgWHannYmtoeyLEdfZbjJPobbxFSx05iIQPXBdAWTubfQW2D8awpH4kJVhF6qOVBzr1jIZeK7RWCYbzkOMOx8Si7Jqu1tm8Z3jdP+opxaouNmtOaHnttRfNj/Ucw1v9I43CHaBwVY5/z2rhtEcuLTzsAR/wfZ3KqIueOsJPPrrsCn/V2rRnNjyfe4ob3cQ6otjCbDFb3rwjaKm4a/k+pv1ok91H2PVmxqbjZIh12QQdlRy5YG/5vwf9+Fufbk+MI2ofjiNoy2RRyc1F/P4z9ztc5b4ANykLWfbKR4f9c+LvaErUD+rhWmQbRp+fkaJVncjj69nKJM/mBL+oVRTO9EZ/H5A2Bj31jNmsRPo9P/I600OY855oNazn4mFMh/q+gj2wdQM1deyQ76r5LsKrgq+aWFsi8phie8tZlbGrrckwwHIecz+CLSjifQT9YNp8xWyybzxQRh/DYypl803m5rmPc4js+eNziGC0LfB63vnGOOUormu9L9m811yw7ZvjoE/qL9Q2OGV/MKAu6vphRFrpxzPiTiBk7nvvxGQ/XhPi51rWj7Jqs1Lojk4GfFbF/jG84OWYvBWJbVheQIy5YlirZZKM065+/UZ+0iu+TE9Npz9Mn/AY8w/1PPJP17+FlTVeR9Z8kX6D8TOa3+BvKizm6etUG6/cvGK8fpdiLz+08B6pnEHVcqEIwlfu6vi6VitHnvw+YPmrdjl+ainF/kSNLqh6D80WzIFs2MjrKlr66uDryo/SpePSpCn247o681Ly0STAcP1ybRtuYHCH2VrQnyagz7gzGJ8POcDDqXGVvhVoHjAWdRdYdFj3C80FbF+I9nsuuC6k6YeDX5bTVWm8UgH6o17Hwehbycn74LMUtrCuVxb1lgCN+G/Kd57LPvrVBX11YxY68dUCksSXk6kI8fbZ8kZc6quLbM4yxMu/VEXl2qwMc8Ycgn9VxrvMVEjjGGjk6Ir6aP1TtvhHl25J9Qr2Owj5veWRwDf3kDGc6L8N1HCvF58fq9CIM6w21DNYiGNpT2ZdrXMvuVdgWfNR8tUWweEkZfHuC1H5bFbd4v+1LMIb4mfmyuGc53MY0msk6nd3j2hbCCCeKLsaJMzkAtrUArS0PrbqHVmNBWj7eKGuF6G9n32s59OuEv5N9rwD+hpCnSvS/BHPH3dJFHKP5ZcAZUZ2uCjy473YRJvBxHDC+6ep4fhVis2tN4FN0bM6TG33B+CsbxDlXpIW/Ga8G0So6LhbZJz5auwvSMnti/7rPb6+nrzusQynS48z4n9cuw8hz7nvNqd+mxr8I3zNe6/I9pZvP9xCffU/Rai5Iy+yp/G0njA26HNejHBsgf/yOcR3nP7uXY/b3ShfpKHvhHGZzkflVC2ANgu0BbJvk3Z/Oy4u0miTvPslrc6/y+Zbgv0v8kZfiz/PynsDfE/hne6/IpjVxL/av2dTlbY9yndlvFaK/rlznBzDP/CQn1/kh4LxzDbnOu49ynQ90rvMu+Nd7j3KdyGfTR7lOPq2r5DrvPSS5DuIjjQrh75L8ruE8w/OSsiPyXCSXaHjw7Tue61V5VJXwf0m5D+YfnPugDns58sbRYrlPU+Arv3K+8wuaCzH3sT4KsX6UDg/HyeEkHbXb7c44Sdd9NrjXHw1ORoN2+7DXTnvt/jLrV6HPoAQ+Cxd6faSr6oR4fuL3tD6C/y5gkRql4f8F5tw/0PoIv3cAYWrNt5ljc4SpNd/AZyl6fC4hAn0Cn4NZ+Myk8W+QrCHmYORn8mCfusbrmIFeldwzedReePUKYLffZjea7zP1T1zVOr7yX17XWfZMs3qNr1qH4HMiJSGDwdBH+Iwq6mXjaStHN17HxPU+FScwjiD+XyFONDKiih/HCRzTHCfYxxGGfctxItA+4XNf3L3ERnlnPf4h1kx9/q3WB1kGxPed2VBnPer0PUQuG0cX/0utstcu2cvw/+2xl9K/5rFXU+DveuyFtsR7mXdebFmXL15mW/ZFw/+fsK1ae8Yzha5VpkH06av93Grt2Tde1L+s8vW/Gi8twsf+VjGb4zny5X3gGGs5nmPMttiGsdQ392B/83msy9am8+L5bsb3srVplXOe7y+cRjNZp7N7XLOaI9YhEZ/rkIZ/szzjdwv85QxX8HN4z3jw4pzrGQ3xW2V68Tes96m6s+Eb74aQ0WBYT0J/d82eE9FeSMvk4Lrth2Eudg2f8e3+luC/SfxVHRt/W6SOrerern+ezBDWVV+qEX38jWUz3wnxfJx0xicHaWcwTAYH7c7heN3P5yf9g+OT+w/pSdo+k+Yy/v8HFVlwd0aMAAA=","debug_symbols":"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","brillig_names":["_add_game"]},{"name":"_resolve_game","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"game_id","type":{"kind":"field"},"visibility":"private"},{"name":"player1_move","type":{"kind":"field"},"visibility":"private"},{"name":"player1_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2701317986746916850":{"error_kind":"string","string":"Game already completed"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"8032895601730151160":{"error_kind":"string","string":"Function _resolve_game can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["_resolve_game"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":7,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"11091894166229312484":{"error_kind":"fmtstring","length":20,"item_types":[]},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"get_game_by_id","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"game_id","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"game_note::GameNote","fields":[{"name":"id","type":{"kind":"field"}},{"name":"bet_amount","type":{"kind":"field"}},{"name":"is_completed","type":{"kind":"boolean"}},{"name":"blocktime","type":{"kind":"field"}},{"name":"player2_address","type":{"kind":"field"}},{"name":"player2_move","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_game_by_id"]},{"name":"get_timeout_blocks","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7VUbUvDMBBOX4bWOZApIij4F1Ja7T5OxK8K+gvikkhhMmmn+HE/3RQuy5mle6HpA+GuyfW5uye9BsQgABuT/wiIY8MOag1Ge7dgE7AhOo/UmsIz7YY0sfL65J/QPE8c/XmsP0uAM+iHn2r+nvSnR8DzuDL8uBed91itIfijLe/0Wa+6z7XeUQ/8Cul5S/1ag0vwT9U6A5/9fL58zRZcPHBeibrGc2XruQ2HcIYHcF7ZnM/f83kpS1E9/Zb1coM7cnBrPyTu3uy6cByGa14aTMHSbkgHVg9jsM3d3bTU4DF/0eh9AVxrvd+Wi4p9iFfB+L73uO83NCLtMzsk5v8dr8y5r3kpJpTqvBHwD4jRHiNG5zj+Gp5PUP3axh3qlAVLZcYku2Oc5zM2tviJpZPv/O8iFZmUMhMsl/dyZ/4/IAEiCN0HAAA=","debug_symbols":"5ZTLaoUwEIbfJWsXmcndVzmUg5d4EETFS6GI796kGGutHDeebroJjnzM/2eY/BPJbTo+7mVdND2JbxOpmiwZyqZ21TRHJO3Kqiof9+1vQv0B+MX3bVL7sh+SbiAxSEMjYuvcfSpKXYeirCyJJZuj3zClIsAUxQobPIA503qBOTNqhdVRZw0sdNYgYAu/RQTYBdY1Bth5/zvr/ALrHNapy5Opg2DBOgjDn1s3iKGzQcn31sWl1oH+sO4F5KsF1KsF9JGAFsDCRgh+JoCgggDy78UEbg5ohSAXWiE72Ux3udBaUS6fw+6BKLaumaFyvw3mn1x1dtV70pVJWtklVIuxzjYZO3y0dhe3bddkNh8764N3k7nuvCFGqPwEwRc6YtRpOJ1P","brillig_names":["get_timeout_blocks"]},{"name":"sync_notes","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VUyw6CMBBseURBOaiJ3kz8gyIYOJJ49x8akKMe8OKNT5eabbqpVRKlJkzSbEs3szNlW0oUKESPvAH9tGnIFdhBDCA6aN/tRgFr9hviQKs7JH/O0iQw+BtQ/5OfWtIvIPktnT+bAM+xVfzYi6w77UaIesKWZ/nPbHpe9fhc/MFnh32k1caghm+uIYci3RuYR4Y8iRlRd9prh/eV5YzJei7w++RVO67va/lrWIeafvmOFV/qrDMe1wmv+YFXVVrypcYv4KBzGnMvbGHe1wvY45yo3mjul/J0vZ0b0gNB8gCVxsvQjgYAAA==","debug_symbols":"ndLBCoQgFAXQf3nrFmll2a/EEFYWgmiYDQzRv49GMzRDG908vOJ5bu4GA+/WqRVq1AvUzQZS98wKrVza9gQ6I6QUU3u9htQPhI73y8yUj4tlxkKNMEqAq8GfqPOjkBxqku2PBBAOFlmwyINFESrw7R80R/QkNM/J16CMHKiIQSQGlTGoikDZbQVokVYfVODyF+0uPpkRrJP8rNi4qv7SOPua+V/5ZqN7PqyG+xpeGuhmg8oEY7fWrX4D","brillig_names":["sync_notes"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"RockPaperScissors::get_game_id_by_index_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"RockPaperScissors::get_game_id_by_index_parameters","fields":[{"name":"index","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"RockPaperScissors::timeout_game_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"RockPaperScissors::timeout_game_parameters","fields":[{"name":"game_id","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"RockPaperScissors::_resolve_game_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"RockPaperScissors::_resolve_game_parameters","fields":[{"name":"game_id","type":{"kind":"field"}},{"name":"player1_move","type":{"kind":"field"}},{"name":"player1_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"RockPaperScissors::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"RockPaperScissors::constructor_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_addr","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"timeout_blocks","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"RockPaperScissors::set_timeout_blocks_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"RockPaperScissors::set_timeout_blocks_parameters","fields":[{"name":"new_timeout","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"RockPaperScissors::start_game_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"RockPaperScissors::start_game_parameters","fields":[{"name":"game_id","type":{"kind":"field"}},{"name":"player1_move","type":{"kind":"field"}},{"name":"bet_amount","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"RockPaperScissors::get_timeout_blocks_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"RockPaperScissors::get_timeout_blocks_parameters","fields":[]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"RockPaperScissors::resolve_game_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"RockPaperScissors::resolve_game_parameters","fields":[{"name":"game_id","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"RockPaperScissors::get_games_length_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"RockPaperScissors::get_games_length_parameters","fields":[]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"RockPaperScissors::play_game_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"RockPaperScissors::play_game_parameters","fields":[{"name":"game_id","type":{"kind":"field"}},{"name":"player2_move","type":{"kind":"field"}},{"name":"bet_match","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"RockPaperScissors::get_game_by_id_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"RockPaperScissors::get_game_by_id_parameters","fields":[{"name":"game_id","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"struct","path":"game_note::GameNote","fields":[{"name":"id","type":{"kind":"field"}},{"name":"bet_amount","type":{"kind":"field"}},{"name":"is_completed","type":{"kind":"boolean"}},{"name":"blocktime","type":{"kind":"field"}},{"name":"player2_address","type":{"kind":"field"}},{"name":"player2_move","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"RockPaperScissors::_add_game_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"RockPaperScissors::_add_game_parameters","fields":[{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"game_note","type":{"kind":"struct","path":"game_note::GameNote","fields":[{"name":"id","type":{"kind":"field"}},{"name":"bet_amount","type":{"kind":"field"}},{"name":"is_completed","type":{"kind":"boolean"}},{"name":"blocktime","type":{"kind":"field"}},{"name":"player2_address","type":{"kind":"field"}},{"name":"player2_move","type":{"kind":"field"}}]}}]}}]}]},"globals":{"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000c0c5aaf"},{"kind":"string","value":"UintNote"},{"kind":"struct","fields":[{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003de78269"},{"kind":"string","value":"ValueNote"},{"kind":"struct","fields":[{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000c0c5aaf"},{"kind":"string","value":"UintNote"},{"kind":"struct","fields":[{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}]}}]}]}],"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"Token"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"admin","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"minters","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"total_supply","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"public_balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"symbol","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"name","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}]}},{"name":"decimals","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}]}}]}}]},{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"RockPaperScissors"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"token_address","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"games_length","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"plays","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"games","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"game_ids","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"owner","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"timeout_blocks","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}]}}]}}]}]}},"file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            /*@safety: `sorted` array is checked to be:\n                a. a permutation of `input`'s elements\n                b. satisfying the predicate `ordering`\n            */\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n","path":"std/array/mod.nr"},"6":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"17":{"source":"use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n","path":"std/embedded_curve_ops.nr"},"18":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        /*@safety: borrow is enforced to be boolean due to its type.\n            if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n            if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n        */\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            /*@safety: decomposition is properly checked below*/\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            unsafe {\n                //@safety: already unconstrained\n                field_less_than(b, a)\n            },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            //@safety: unsafe in unconstrained\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        unsafe {\n            //@safety: Take a hint of the comparison and verify it\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"19":{"source":"pub mod bn254;\nuse crate::runtime::is_unconstrained;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            //@safety : unconstrained context\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"21":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        //@safety : xlo and xhi decomposition is checked below\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"26":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"27":{"source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE: u32 = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR: u32 = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE: u32 = 16;\n\n// A `u32` integer consists of 4 bytes.\nglobal INT_SIZE: u32 = 4;\n\n// Index of the integer in the `INT_BLOCK` where the length is written.\nglobal INT_SIZE_PTR: u32 = MSG_SIZE_PTR / INT_SIZE;\n\n// Magic numbers for bit shifting.\n// Works with actual bit shifting as well as the compiler turns them into * and /\n// but circuit execution appears to be 10% faster this way.\nglobal TWO_POW_8: u32 = 256;\nglobal TWO_POW_16: u32 = TWO_POW_8 * 256;\nglobal TWO_POW_24: u32 = TWO_POW_16 * 256;\nglobal TWO_POW_32: u64 = TWO_POW_24 as u64 * 256;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeros, with neighbouring 4 bytes packed into integers.\ntype MSG_BLOCK = INT_BLOCK;\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ];\n    // Pointer into msg_block on a 64 byte scale\n    let mut msg_byte_ptr = 0;\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            /*@safety  : the msg_block is checked below in verify_msg_block*/\n            build_msg_block(msg, message_size, msg_start)\n        };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_block, h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            //@safety : the msg_block is checked below in verify_msg_block\n            build_msg_block(msg, message_size, msg_start)\n        };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block = update_block_item(\n        msg_block,\n        msg_byte_ptr,\n        |msg_item| set_item_byte_then_zeros(msg_item, msg_byte_ptr, 1 << 7),\n    );\n    msg_byte_ptr = msg_byte_ptr + 1;\n    let last_block = msg_block;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_block, h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe {\n        //@safety : the msg_len is checked below in verify_msg_len\n        attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size)\n    };\n\n    if !is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Apply a function on the block item which the pointer indicates.\nfn update_block_item<Env>(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    f: fn[Env](u32) -> u32,\n) -> MSG_BLOCK {\n    let i = msg_byte_ptr / INT_SIZE;\n    msg_block[i] = f(msg_block[i]);\n    msg_block\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        if item == 0 {\n            0\n        } else {\n            // Brillig wouldn't shift 0<<4 without overflow.\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::{\n        attach_len_to_msg_block, build_msg_block, byte_into_item, get_item_byte, make_item,\n        set_item_byte_then_zeros, set_item_zeros,\n    };\n    use super::INT_BLOCK;\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n\n    #[test]\n    fn test_get_item_byte() {\n        let fld = make_item(10, 20, 30, 40);\n        assert_eq(fld, 0x0a141e28);\n        assert_eq(get_item_byte(fld, 0), 10);\n        assert_eq(get_item_byte(fld, 4), 10);\n        assert_eq(get_item_byte(fld, 6), 30);\n    }\n\n    #[test]\n    fn test_byte_into_item() {\n        let fld = make_item(0, 20, 0, 0);\n        assert_eq(byte_into_item(20, 1), fld);\n        assert_eq(byte_into_item(20, 5), fld);\n    }\n\n    #[test]\n    fn test_set_item_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 0, 0, 0);\n        assert_eq(set_item_zeros(fld0, 3), fld1);\n        assert_eq(set_item_zeros(fld0, 4), 0);\n        assert_eq(set_item_zeros(0, 4), 0);\n    }\n\n    #[test]\n    fn test_set_item_byte_then_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 50, 0, 0);\n        assert_eq(set_item_byte_then_zeros(fld0, 1, 50), fld1);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_0() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48,\n        ];\n        assert_eq(input.len(), 22);\n        let (msg_block, msg_byte_ptr) = unsafe {\n            //@safety : testing context\n            build_msg_block(input, input.len(), 0)\n        };\n        assert_eq(msg_byte_ptr, input.len());\n        assert_eq(msg_block[0], make_item(input[0], input[1], input[2], input[3]));\n        assert_eq(msg_block[1], make_item(input[4], input[5], input[6], input[7]));\n        assert_eq(msg_block[5], make_item(input[20], input[21], 0, 0));\n        assert_eq(msg_block[6], 0);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_1() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        assert_eq(input.len(), 68);\n        let (msg_block, msg_byte_ptr) = unsafe {\n            //@safety : testing context\n            build_msg_block(input, input.len(), 64)\n        };\n        assert_eq(msg_byte_ptr, 4);\n        assert_eq(msg_block[0], make_item(input[64], input[65], input[66], input[67]));\n        assert_eq(msg_block[1], 0);\n    }\n\n    #[test]\n    fn test_attach_len_to_msg_block() {\n        let input: INT_BLOCK = [\n            2152555847, 1397309779, 1936618851, 1262052426, 1936876331, 1985297723, 543702374,\n            1919905082, 1131376244, 1701737517, 1417244773, 978151789, 1697470053, 1920166255,\n            1849316213, 1651139939,\n        ];\n        let msg_block = unsafe {\n            //@safety  : testing context\n            attach_len_to_msg_block(input, 1, 448)\n        };\n        assert_eq(msg_block[0], ((1 << 7) as u32) * 256 * 256 * 256);\n        assert_eq(msg_block[1], 0);\n        assert_eq(msg_block[15], 3584);\n    }\n}\n","path":"std/hash/sha256.nr"},"51":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"52":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"57":{"source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n","path":"std/slice.nr"},"62":{"source":"use dep::aztec::protocol_types::traits::{Deserialize, Serialize};\n\nglobal GAME_NOTE_LEN: u32 = 6;\n\npub struct GameNote {\n    pub id: Field,\n    pub bet_amount: Field,\n    pub is_completed: bool,\n    pub blocktime: Field,\n    pub player2_address: Field,\n    pub player2_move: Field,\n}\n\nimpl GameNote {\n    pub fn new(id: Field, bet_amount: Field) -> Self {\n        GameNote {\n            id,\n            bet_amount,\n            is_completed: false,\n            blocktime: 0,\n            player2_address: 0,\n            player2_move: 0\n        }\n    }\n}\n\nimpl Serialize<GAME_NOTE_LEN> for GameNote {\n    fn serialize(self) -> [Field; GAME_NOTE_LEN] {\n        [\n            self.id,\n            self.bet_amount,\n            self.is_completed as Field,\n            self.blocktime,\n            self.player2_address,\n            self.player2_move\n        ]\n    }\n}\n\nimpl Eq for GameNote {\n    fn eq(self, other: Self) -> bool {\n        self.id == other.id\n    }\n}\n\nimpl Deserialize<GAME_NOTE_LEN> for GameNote {\n    fn deserialize(fields: [Field; GAME_NOTE_LEN]) -> GameNote {\n        GameNote {\n            id: fields[0],\n            bet_amount: fields[1],\n            is_completed: fields[2] != 0,\n            blocktime: fields[3],\n            player2_address: fields[4],\n            player2_move: fields[5]\n        }\n    }\n}\n","path":"/home/john-play/Documents/joaolago1113/ZKRPS/aztec_wallet/src/contracts/src/game_note.nr"},"63":{"source":"mod game_note;\n\nuse dep::aztec::macros::aztec;\n\n/// An Aztec v3 Rock-Paper-Scissors contract with betting functionality.\n#[aztec]\ncontract RockPaperScissors {\n\n    use crate::game_note::GameNote;\n    use dep::aztec::{\n        encrypted_logs::{\n            encrypted_event_emission::encode_and_encrypt_event_unconstrained,\n            encrypted_note_emission::{\n                encode_and_encrypt_note_unconstrained,\n            },\n        },\n        note::{note_getter_options::NoteGetterOptions},\n        protocol_types::public_keys::OvpkM,\n        keys::getters::get_public_keys,\n        prelude::{PublicImmutable, AztecAddress, PrivateMutable, Map, PrivateSet, PrivateImmutable, PublicMutable, NoteHeader, Point},\n        encrypted_logs::encrypted_note_emission::encode_and_encrypt_note,\n        macros::{storage::storage, storage::storage_no_init, functions::{private, public, initializer, internal}}\n    };\n    use dep::aztec::{note::note_getter_options::SortOrder, utils::comparison::Comparator};\n    use dep::token::Token;\n    use dep::value_note::value_note::ValueNote;\n    use aztec::oracle::random::random;\n\n    /// The contract's main storage structure.\n    #[storage]\n    struct Storage<Context> {\n        /// The L2 token used for bets\n        token_address: PublicImmutable<AztecAddress, Context>,\n        games_length: PublicMutable<Field, Context>,\n\n        plays: Map<Field, PrivateMutable<ValueNote, Context>, Context>,\n        games: Map<Field, PublicMutable<GameNote, Context>, Context>,\n        game_ids: Map<Field, PublicImmutable<Field, Context>, Context>,\n\n        owner: PublicImmutable<AztecAddress, Context>,\n        timeout_blocks: PublicMutable<Field, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor(owner: AztecAddress, token_addr: AztecAddress, timeout_blocks: Field) {\n        storage.owner.initialize(owner);\n        storage.token_address.initialize(token_addr);\n        storage.games_length.write( 0 );\n        storage.timeout_blocks.write(timeout_blocks);\n    }\n\n    #[public]\n    fn set_timeout_blocks(new_timeout: Field) {\n        assert(context.msg_sender() == storage.owner.read(), \"Only owner can set timeout blocks\");\n        storage.timeout_blocks.write(new_timeout);\n    }\n\n    #[private]\n    fn start_game(\n        game_id: Field,\n        player1_move: Field,\n        bet_amount: Field\n    ) {\n        assert(player1_move as u8 <= 2, \"Invalid move!\");\n\n        //check if game_id already exists\n        //assert(!storage.game_ids.at(game_id).is_some(), \"Game already exists\");\n\n        let mut player_move_note = ValueNote::new(player1_move, context.msg_sender());\n\n        storage.plays.at(game_id).initialize(&mut player_move_note).emit(encode_and_encrypt_note_unconstrained(\n            &mut context,\n            context.msg_sender(),\n            context.msg_sender(),\n        ));\n\n        // Create and insert game note\n        let mut game_note = GameNote::new(\n            game_id,\n            bet_amount\n        );\n\n        RockPaperScissors::at(context.this_address())\n            ._add_game(context.msg_sender(), game_note)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _add_game(sender: AztecAddress, game_note: GameNote){\n\n        let current_length = storage.games_length.read();\n        storage.games_length.write(current_length + 1);\n\n        storage.game_ids.at(current_length).initialize(game_note.id);\n\n        storage.games.at(game_note.id).write(game_note);\n\n        let token_address = storage.token_address.read();\n\n        Token::at(token_address)\n            .transfer_in_public(sender, context.this_address(), game_note.bet_amount, 0)\n            .call(&mut context);\n    }\n\n    #[public]\n    fn play_game(\n        game_id: Field,\n        player2_move: Field,\n        bet_match: Field\n    ) {\n        //assert(storage.plays.at(game_id).is_some(), \"Game not found\");  \n        let token_addr = storage.token_address.read();\n\n        Token::at(token_addr)\n            .transfer_in_public(context.msg_sender(), context.this_address(), bet_match, 0)\n            .call(&mut context);\n\n        let mut game_note = storage.games.at(game_id).read();\n\n        game_note.player2_move = player2_move;\n        game_note.player2_address = context.msg_sender().to_field();\n        game_note.blocktime = context.block_number();\n\n        storage.games.at(game_id).write(game_note);   \n    }\n\n    #[private]\n    fn resolve_game(game_id: Field) {\n        let play = storage.plays.at(game_id).get_note();\n        let player1_move = play.note.value;\n\n        RockPaperScissors::at(context.this_address())\n            ._resolve_game(game_id, player1_move, context.msg_sender())\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _resolve_game(game_id: Field, player1_move: Field, player1_address: AztecAddress) {\n        let mut game_note = storage.games.at(game_id).read();\n        assert(!game_note.is_completed, \"Game already completed\");\n\n        // Get token address\n        let token_addr = storage.token_address.read();\n        let player2_address = game_note.player2_address;\n\n        // Compare moves and determine winner\n        let p1 = player1_move;\n        let p2 = game_note.player2_move;\n        let bet_amount = game_note.bet_amount;\n\n        // Decide winner. 0=Rock,1=Paper,2=Scissors\n        let mut winner: AztecAddress = AztecAddress::zero();\n        let mut is_draw = false;\n\n        if p1 == p2 {\n            // It's a draw\n            is_draw = true;\n        } else {\n            // RPS logic: if (p1 + 1) mod 3 == p2 => p2 wins\n            let p1_plus_one = ((p1 + 1) as u32 % 3).to_field();\n            if p1_plus_one == p2 {\n                // Player2 wins\n                winner = AztecAddress { inner: player2_address };\n            } else {\n                // Player1 wins\n                winner = player1_address;\n            }\n        }\n\n        // Handle payouts\n        let pot = bet_amount * 2; // Total pot is 2x bet amount\n        \n        if is_draw {\n            // Return bets to both players\n            Token::at(token_addr)\n                .transfer_in_public(context.this_address(), player1_address, bet_amount, 0)\n                .call(&mut context);\n\n            Token::at(token_addr)\n                .transfer_in_public(context.this_address(), AztecAddress { inner: player2_address }, bet_amount, 0)\n                .call(&mut context);\n        } else {\n            // Send entire pot to winner\n            Token::at(token_addr)\n                .transfer_in_public(context.this_address(), winner, pot, 0)\n                .call(&mut context);\n        }\n\n        // Mark game as completed\n        game_note.is_completed = true;\n        storage.games.at(game_id).write(game_note);\n    }\n\n    #[public]\n    fn timeout_game(game_id: Field) {\n        let mut game_note = storage.games.at(game_id).read();\n        \n        // Check game isn't already completed\n        assert(!game_note.is_completed, \"Game already completed\");\n        \n        // Check player2 has made their move (blocktime will be non-zero)\n        assert(game_note.blocktime != 0, \"Player 2 hasn't played yet\");\n        \n        // Check if enough blocks have passed\n        let current_block = context.block_number();\n        let blocks_passed = current_block - game_note.blocktime;\n        let timeout_blocks = storage.timeout_blocks.read();\n        assert(blocks_passed as u32 > timeout_blocks as u32, \"Not enough blocks have passed for timeout\");\n\n        // Get token address\n        let token_addr = storage.token_address.read();\n        let bet_amount = game_note.bet_amount;\n        \n        // Award both bets to player 2 since player 1 timed out\n        let pot = bet_amount * Field::from(2);\n        Token::at(token_addr)\n            .transfer_in_public(context.this_address(), AztecAddress { inner: game_note.player2_address }, pot, 0)\n            .call(&mut context);\n\n        // Mark game as completed\n        game_note.is_completed = true;\n        storage.games.at(game_id).write(game_note);\n    }\n\n    #[public]\n    unconstrained fn get_game_by_id(game_id: Field) -> pub GameNote {\n        storage.games.at(game_id).read()\n    }\n\n    #[public]\n    unconstrained fn get_game_id_by_index(index: Field) -> pub Field {\n        storage.game_ids.at(index).read()\n    }\n\n    #[public]\n    unconstrained fn get_games_length() -> pub Field {\n        storage.games_length.read()\n    }\n\n    #[public]\n    unconstrained fn get_timeout_blocks() -> pub Field {\n        storage.timeout_blocks.read()\n    }\n\n}\n\n","path":"/home/john-play/Documents/joaolago1113/ZKRPS/aztec_wallet/src/contracts/src/main.nr"},"64":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, traits::Deserialize,\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::hash_args;\nuse crate::oracle::arguments::pack_arguments;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\npub struct PrivateCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub gas_opts: GasOpts,\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n    pub gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n    pub gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr"},"72":{"source":"use dep::protocol_types::debug_log::debug_log_format;\n\nuse crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    hash::{ArgsHasher, hash_args_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        arguments,\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n            set_public_teardown_function_call_internal,\n        },\n        key_validation_request::get_key_validation_request,\n        returns::pack_returns,\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS, PUBLIC_DISPATCH_SELECTOR,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::Empty,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n\n        // WARNING(https://github.com/AztecProtocol/aztec-packages/issues/10558): if you delete this debug_log_format line, some tests fail.\n        debug_log_format(\n            \"Context.note_hashes, after pushing new note hash: {0}\",\n            self.note_hashes.storage().map(|nh: NoteHash| nh.value),\n        );\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: self.next_counter(),\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert(request.pk_m.hash() == pk_m_hash);\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index],\n                },\n            );\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // The oracle simulates the private call and returns the value of the side effects counter after execution of\n        // the call (which means that end_side_effect_counter - start_side_effect_counter is the number of side effects\n        // that took place), along with the hash of the return values. We validate these by requesting a private kernel\n        // iteration in which the return values are constrained to hash to `returns_hash` and the side effects counter\n        // to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"73":{"source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Deserialize, Empty, Serialize};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe { emit_unencrypted_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call_static(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // AVM opcodes are constrained by the AVM itself.\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Deserialize<N>,\n    {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Serialize<N>,\n    {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_opcode(gas, address, args)\n}\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"77":{"source":"use crate::{\n    context::PrivateContext,\n    encrypted_logs::payload::compute_private_log_payload,\n    note::{note_emission::NoteEmission, note_interface::NoteInterface},\n};\nuse dep::protocol_types::{\n    abis::note_hash::NoteHash, address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS,\n};\n\n/// Computes private note log payload\nfn compute_payload<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> ([Field; PRIVATE_LOG_SIZE_IN_FIELDS], u32)\nwhere\n    Note: NoteInterface<N>,\n{\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let plaintext = note.to_be_bytes(storage_slot);\n\n    let payload = compute_private_log_payload(contract_address, recipient, sender, plaintext);\n\n    (payload, note_hash_counter)\n}\n\nunconstrained fn compute_payload_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> ([Field; PRIVATE_LOG_SIZE_IN_FIELDS], u32)\nwhere\n    Note: NoteInterface<N>,\n{\n    compute_payload(context, note, recipient, sender)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        let (encrypted_log, note_hash_counter) =\n            compute_payload(*context, e.note, recipient, sender);\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        //   Unconstrained logs have both their content and encryption unconstrained - it could occur that the\n        // recipient is unable to decrypt the payload.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        //   It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        let (encrypted_log, note_hash_counter) =\n            unsafe { compute_payload_unconstrained(*context, e.note, recipient, sender) };\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr"},"78":{"source":"use dep::protocol_types::{\n    address::AztecAddress,\n    point::Point,\n    public_keys::{IvpkM, ToPoint},\n    scalar::Scalar,\n};\n\nuse crate::keys::secret_derivation::derive_aes_secret;\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    pub fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    pub fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48]\n    where\n        T: ToPoint,\n    {\n        let full_key = derive_aes_secret(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false,\n        },\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131,\n        160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171,\n        176, 218, 48, 209, 73, 89, 200, 209,\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr"},"80":{"source":"use dep::protocol_types::{\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, PRIVATE_LOG_SIZE_IN_FIELDS},\n    hash::poseidon2_hash,\n    point::Point,\n    public_keys::AddressPoint,\n    scalar::Scalar,\n    utils::arrays::array_concat,\n};\nuse std::{\n    aes128::aes128_encrypt, embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    field::bn254::decompose, hash::from_field_unsafe as fr_to_fq_unsafe,\n};\n\nuse crate::{\n    encrypted_logs::header::EncryptedLogHeader,\n    keys::secret_derivation::derive_aes_secret,\n    oracle::{\n        notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n        random::random,\n    },\n    utils::{bytes::bytes_to_fields, point::point_to_bytes},\n};\n\n// 1 field is reserved for tag.\nglobal ENCRYPTED_PAYLOAD_SIZE_IN_BYTES: u32 = (PRIVATE_LOG_SIZE_IN_FIELDS - 1) * 31;\n\ncomptime global HEADER_SIZE: u32 = 48;\n\n// Bytes padded to the overhead, so that the size of the incoming body ciphertext will be a multiple of 16.\ncomptime global OVERHEAD_PADDING: u32 = 15;\n\npub comptime global OVERHEAD_SIZE: u32 = 32 /* eph_pk */\n    + HEADER_SIZE /* incoming_header */\n    + OVERHEAD_PADDING /* padding */;\n\nglobal PLAINTEXT_LENGTH_SIZE: u32 = 2;\n\n// This is enough for 8 fields of data.\n// 1 field for storage slot, 1 field for note/event type id, allowing 6 fields for custom values.\nglobal MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES: u32 =\n    ENCRYPTED_PAYLOAD_SIZE_IN_BYTES - OVERHEAD_SIZE - PLAINTEXT_LENGTH_SIZE - 1 /* aes padding */;\n\n// Note: Might have to update PRIVATE_LOG_SIZE_IN_FIELDS in `constants.nr` if the above changes.\n// This value ideally should be set by the protocol, allowing users (or `aztec-nr`) to fit data within the defined size limits.\n// Currently, we adjust this value as the structure changes, then update `constants.nr` to match.\n// Once the structure is finalized with defined overhead and max note field sizes, this value will be fixed and should remain unaffected by further payload composition changes.\n\npub fn compute_private_log_payload<let P: u32>(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    plaintext: [u8; P],\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS] {\n    assert(\n        P < MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES,\n        f\"plaintext for log must not exceed {MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES}\",\n    );\n\n    let extended_plaintext: [u8; MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES + PLAINTEXT_LENGTH_SIZE] =\n        extend_private_log_plaintext(plaintext);\n    let encrypted: [u8; ENCRYPTED_PAYLOAD_SIZE_IN_BYTES] =\n        compute_encrypted_log(contract_address, recipient, extended_plaintext);\n\n    // We assume that the sender wants for the recipient to find the tagged note, and therefore that they will cooperate\n    // and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the note\n    // automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    array_concat([tag], bytes_to_fields(encrypted))\n}\n\npub fn compute_partial_public_log_payload<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    plaintext: [u8; P],\n) -> [u8; M] {\n    let extended_plaintext: [u8; P + PLAINTEXT_LENGTH_SIZE] =\n        extend_private_log_plaintext(plaintext);\n    let encrypted: [u8; M - 32] =\n        compute_encrypted_log(contract_address, recipient, extended_plaintext);\n\n    // We assume that the sender wants for the recipient to find the tagged note, and therefore that they will cooperate\n    // and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the note\n    // automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n    // Silo the tag with contract address.\n    // This is done by the kernel circuit to the private logs, but since the partial log will be finalized and emitted\n    // in public as unencrypted log, its tag is not siloed at the moment.\n    // To avoid querying logs using two types of tags, we silo the tag manually here.\n    // TODO(#10273) This should be done by the AVM when it's processing the raw logs instead of their hashes.\n    let siloed_tag_bytes: [u8; 32] =\n        poseidon2_hash([contract_address.to_field(), tag]).to_be_bytes();\n\n    // Temporary hack so that the partial public log remains the same format.\n    // It should return field array and make the tag the first field as compute_private_log_payload does.\n    let mut log_bytes = [0; M];\n    for i in 0..32 {\n        log_bytes[i] = siloed_tag_bytes[i];\n    }\n    for i in 0..encrypted.len() {\n        log_bytes[i + 32] = encrypted[i];\n    }\n\n    log_bytes\n}\n\nfn compute_encrypted_log<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    plaintext: [u8; P],\n) -> [u8; M] {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] =\n        header.compute_ciphertext(eph_sk, recipient.to_address_point());\n    let incoming_body_ciphertext =\n        compute_incoming_body_ciphertext(plaintext, eph_sk, recipient.to_address_point());\n\n    let mut encrypted_bytes = [0; M];\n    let mut offset = 0;\n\n    // eph_pk\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[offset + i] = eph_pk_bytes[i];\n    }\n    offset += 32;\n\n    // incoming_header\n    for i in 0..HEADER_SIZE {\n        encrypted_bytes[offset + i] = incoming_header_ciphertext[i];\n    }\n    offset += HEADER_SIZE;\n\n    // Padding.\n    offset += OVERHEAD_PADDING;\n\n    // incoming_body\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - offset;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[offset + i] = incoming_body_ciphertext[i];\n    }\n\n    encrypted_bytes\n}\n\n// Prepend the plaintext length as the first byte, then copy the plaintext itself starting from the second byte.\n// Fill the remaining bytes with random values to reach a fixed length of N.\nfn extend_private_log_plaintext<let P: u32, let N: u32>(plaintext: [u8; P]) -> [u8; N] {\n    let mut padded = unsafe { get_random_bytes() };\n    padded[0] = (P >> 8) as u8;\n    padded[1] = P as u8;\n    for i in 0..P {\n        padded[i + PLAINTEXT_LENGTH_SIZE] = plaintext[i];\n    }\n    padded\n}\n\nunconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\npub fn compute_incoming_body_ciphertext<let P: u32>(\n    plaintext: [u8; P],\n    eph_sk: Scalar,\n    address_point: AddressPoint,\n) -> [u8] {\n    let full_key = derive_aes_secret(eph_sk, address_point.to_point());\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(plaintext, iv, sym_key)\n}\n\nmod test {\n    use crate::encrypted_logs::payload::{\n        compute_incoming_body_ciphertext, compute_private_log_payload,\n        MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES,\n    };\n    use dep::protocol_types::{address::AztecAddress, point::Point, scalar::Scalar};\n    use protocol_types::public_keys::AddressPoint;\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_log_payload.test.ts`\n        let contract_address = AztecAddress::from_field(\n            0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,\n        );\n\n        let plaintext = [\n            0, 0, 0, 1, 48, 22, 64, 206, 234, 117, 131, 145, 178, 225, 97, 201, 44, 5, 19, 241, 41,\n            2, 15, 65, 37, 37, 106, 253, 174, 38, 70, 206, 49, 9, 159, 92, 16, 244, 140, 217, 239,\n            247, 174, 91, 32, 156, 85, 124, 112, 222, 46, 101, 126, 231, 145, 102, 134, 134, 118,\n            183, 135, 233, 65, 126, 25, 38, 14, 4, 15, 228, 107, 229, 131, 183, 31, 74, 181, 183,\n            12, 38, 87, 255, 29, 5, 204, 207, 29, 41, 42, 147, 105, 98, 141, 26, 25, 79, 148, 78,\n            101, 153, 0, 0, 16, 39,\n        ];\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(\n            (MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES as u64 + 1 + 30) / 31,\n        );\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        let sender = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns([69420, 1337]);\n\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let payload = compute_private_log_payload(contract_address, recipient, sender, plaintext);\n\n        // The following value was generated by `encrypted_log_payload.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let private_log_payload_from_typescript = [\n            0x0e9cffc3ddd746affb02410d8f0a823e89939785bcc8e88ee4f3cae05e737c36,\n            0x008d460c0e434d846ec1ea286e4090eb56376ff27bddc1aacae1d856549f701f,\n            0x00a70577790aeabcc2d81ec8d0c99e7f5d2bf2f1452025dc777a178404f851d9,\n            0x003de818923f85187871d99bdf95d695eff0a900000000000000000000000000,\n            0x000000a600a61f7d59eeaf52eb51bc0592ff981d9ba3ea8e6ea8ba9dc0cec8c7,\n            0x000b81e84556a77ce6c3ca47a527f99ffe7b2524bb885a23020b7295748ad19c,\n            0x001083618ad96298b76ee07eb1a56d19cc798710e9f5de96501bd59b3781c9c0,\n            0x002a6c95c5912f8936b1500d362afbf0922c85b1ada18db8b95162a6e9d06765,\n            0x005cdf669eb387f8e0492a95fdcdb39429d5340b4bebc250ba9bf62c2f49f549,\n            0x00f37beed75a668aa51967e0e57547e5a655157bcf381e22f30e25881548ec96,\n            0x0006a151b5fbfb2d14ee4b34bf4c1dbd71c7be15ad4c63474bb6f89970aeb3d9,\n            0x00489c8edbdff80a1a3a5c28370e534abc870a85ea4318326ea19222fb10df35,\n            0x008c765edada497db4284ae30507a2e03e983d23cfa0bd831577e857bbef9cf7,\n            0x0090c97cb5699cc8783a1b4276d929be2882e5b9b72829a4f8404f7e3c853d11,\n            0x00d6d5a000b80134891e95f81007ad35d3945eaeecbe137fff85d01d7eaf8f19,\n            0x00a15eb965c6a4bc97aa87fd3463c31c9d4e0d722a8ba870bcc50c9c7a8b48ad,\n            0x0063c861bdbe490d44c57382decbae663927909652f87ac18dcfd5b30649cce5,\n            0x00820f14caa725efe1fa3485ceac88499eadf0565c5b20998c05931bbf478e68,\n        ];\n\n        assert_eq(payload, private_log_payload_from_typescript);\n    }\n\n    #[test]\n    fn test_incoming_body_ciphertext_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n        };\n        let address_point = AddressPoint {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false,\n            },\n        };\n        let plaintext = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,\n        ];\n\n        // `compute_incoming_body_ciphertext(...)` function then derives symmetric key from `eph_sk` and `address_point` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, address_point);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160,\n            190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157,\n            131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93,\n            46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130,\n            37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95,\n            115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234,\n            245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162,\n            25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185,\n            212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236,\n            23, 206, 229, 108,\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr"},"83":{"source":"use dep::protocol_types::point::Point;\n\n// A set of generators generated with `derive_generators(...)` function from noir::std\npub global Ga1: Point = Point {\n    x: 0x30426e64aee30e998c13c8ceecda3a77807dbead52bc2f3bf0eae851b4b710c1,\n    y: 0x113156a068f603023240c96b4da5474667db3b8711c521c748212a15bc034ea6,\n    is_infinite: false,\n};\npub global Ga2: Point = Point {\n    x: 0x2825c79cc6a5cbbeef7d6a8f1b6a12b312aa338440aefeb4396148c89147c049,\n    y: 0x129bfd1da54b7062d6b544e7e36b90736350f6fba01228c41c72099509f5701e,\n    is_infinite: false,\n};\npub global Ga3: Point = Point {\n    x: 0x0edb1e293c3ce91bfc04e3ceaa50d2c541fa9d091c72eb403efb1cfa2cb3357f,\n    y: 0x1341d675fa030ece3113ad53ca34fd13b19b6e9762046734f414824c4d6ade35,\n    is_infinite: false,\n};\npub global Ga4: Point = Point {\n    x: 0x0e0dad2250583f2a9f0acb04ededf1701b85b0393cae753fe7e14b88af81cb52,\n    y: 0x0973b02c5caac339ee4ad5dab51329920f7bf1b6a07e1dabe5df67040b300962,\n    is_infinite: false,\n};\npub global Ga5: Point = Point {\n    x: 0x2f3342e900e8c488a28931aae68970738fdc68afde2910de7b320c00c902087d,\n    y: 0x1bf958dc63cb09d59230603a0269ae86d6f92494da244910351f1132df20fc08,\n    is_infinite: false,\n};\n// If you change this update `G_SLOT` in `yarn-project/simulator/src/client/test_utils.ts` as well\npub global G_slot: Point = Point {\n    x: 0x041223147b680850dc82e8a55a952d4df20256fe0593d949a9541ca00f0abf15,\n    y: 0x0a8c72e60d0e60f5d804549d48f3044d06140b98ed717a9b532af630c1530791,\n    is_infinite: false,\n};\n\nmod test {\n    use crate::generators::{G_slot, Ga1, Ga2, Ga3, Ga4, Ga5};\n    use dep::protocol_types::point::Point;\n    use std::hash::derive_generators;\n\n    #[test]\n    unconstrained fn test_generators() {\n        let generators: [Point; 6] = derive_generators(\"aztec_nr_generators\".as_bytes(), 0);\n        assert_eq(generators[0], Ga1);\n        assert_eq(generators[1], Ga2);\n        assert_eq(generators[2], Ga3);\n        assert_eq(generators[4], Ga4);\n        assert_eq(generators[5], Ga5);\n        assert_eq(generators[3], G_slot);\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/generators.nr"},"84":{"source":"use crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\nuse dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::Hash,\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(\n    contract_address: AztecAddress,\n    log: [u8; N],\n) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd,\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = AztecAddress::from_field(\n        0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303,\n    );\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/hash.nr"},"92":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/initializer.nr"},"94":{"source":"use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"97":{"source":"use crate::utils::point::point_to_bytes;\nuse dep::protocol_types::{constants::GENERATOR_INDEX__SYMMETRIC_KEY, point::Point, scalar::Scalar};\nuse std::{embedded_curve_ops::multi_scalar_mul, hash::sha256};\n\npub fn derive_aes_secret(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret = point_to_bytes(multi_scalar_mul([point], [secret]));\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret[i];\n    }\n\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/10537): Replace use of sha256\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_derive_aes_secret_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let key = derive_aes_secret(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158,\n        236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159,\n    ];\n    assert_eq(key, key_from_typescript);\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/keys/secret_derivation.nr"},"109":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_header::NoteHeader,\n    note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_nullify_internal, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(context: &mut PrivateContext, note: Note)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    notify_nullified_note(nullifier, notification_note_hash, nullifier_counter);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"111":{"source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/note/note_emission.nr"},"113":{"source":"use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteInterface, NullifiableNote},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\nuse dep::protocol_types::constants::{\n    GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(context: PrivateContext, storage_slot: Field, note: Note)\nwhere\n    Note: NoteInterface<N>,\n{\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (Note, Field)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note = unsafe { get_note_internal(storage_slot) };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::array::collapse(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> =\n        BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note\nwhere\n    Note: NoteInterface<N>,\n{\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length,\n    )[0]\n        .expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteInterface<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteInterface<N>,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr"},"120":{"source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote}},\n    utils::array,\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier as compute_siloed_nullifier_from_preimage,\n    compute_unique_note_hash,\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash = note.compute_note_hash();\n    let header = note.get_header();\n    let nonce = header.nonce;\n    let counter = header.note_hash_counter;\n\n    // If same tx note, read request always uses the normal note hash\n    if counter != 0 {\n        note_hash\n    } else {\n        // If the note comes from a different tx, we need to compute the note hash that reached the tree\n        compute_unique_note_hash(\n            nonce,\n            compute_siloed_note_hash(header.contract_address, note_hash),\n        )\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note.get_header();\n\n    if (header.note_hash_counter != 0) & (header.nonce != 0) {\n        // Non-revertible note, nullified by a revertible nullifier, we need to nullify the note hash that will reach the tree\n        let siloed_note_hash =\n            compute_siloed_note_hash(header.contract_address, note_hash_for_read_request);\n\n        compute_unique_note_hash(header.nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub unconstrained fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S],\n) -> [Field; 4]\nwhere\n    T: NoteInterface<N> + NullifiableNote,\n{\n    let mut note = deserialize_content(array::subarray(serialized_note, 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, note_hash);\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"121":{"source":"/// Notifies the simulator that `args` will later be used at some point during execution, referenced by their hash. This\n/// allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of arguments.\npub fn pack_arguments(args: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_arguments_oracle_wrapper(args) };\n}\n\n/// Same as `pack_arguments`, but using arrays instead of slices.\npub fn pack_arguments_array<let N: u32>(args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_arguments_array_oracle_wrapper(args) };\n}\n\nunconstrained fn pack_arguments_oracle_wrapper(args: [Field]) {\n    let _ = pack_arguments_oracle(args);\n}\n\nunconstrained fn pack_arguments_array_oracle_wrapper<let N: u32>(args: [Field; N]) {\n    let _ = pack_arguments_array_oracle(args);\n}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr"},"124":{"source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"126":{"source":"use dep::protocol_types::{\n    address::AztecAddress, constants::CONTRACT_INSTANCE_LENGTH, contract_class_id::ContractClassId,\n    contract_instance::ContractInstance,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    let (member, exists) = get_contract_instance_deployer_internal_avm(address);\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    let (member, exists) = get_contract_instance_class_id_internal_avm(address);\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    let (member, exists) = get_contract_instance_initialization_hash_internal_avm(address);\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"132":{"source":"use dep::protocol_types::abis::validation_requests::{\n    key_validation_request::KEY_VALIDATION_REQUEST_LENGTH, KeyValidationRequest,\n};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"133":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"136":{"source":"use crate::{note::{note_header::NoteHeader, note_interface::NoteInterface}, utils::array};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::{INDEXED_TAGGING_SECRET_LENGTH, IndexedTaggingSecret},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            serialized_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        serialized_note,\n        note_hash,\n        counter,\n    );\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(\n    _nullifier: Field,\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S],\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S]\nwhere\n    Note: NoteInterface<N>,\n{\n    sync_notes_oracle_wrapper();\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let note_content = array::subarray(fields, read_offset + 2);\n\n            let mut note = Note::deserialize_content(note_content);\n            note.set_header(NoteHeader { contract_address, nonce, storage_slot, note_hash_counter });\n\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n/// Same as `get_indexed_tagging_secret_as_sender`, except it returns the derived tag, ready to be included in a log.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender(sender, recipient).compute_tag(recipient)\n}\n\n/// Returns the tagging secret for a given sender and recipient pair, siloed for the current contract address.\n/// Includes the last known index used to send a note tagged with this secret.\n/// For this to work, PXE must know the ivsk_m of the sender.\n/// For the recipient's side, only the address is needed.\npub unconstrained fn get_indexed_tagging_secret_as_sender(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> IndexedTaggingSecret {\n    let result = get_indexed_tagging_secret_as_sender_oracle(sender, recipient);\n    IndexedTaggingSecret::deserialize(result)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> [Field; INDEXED_TAGGING_SECRET_LENGTH] {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n\n/// Finds new notes that may have been sent to all registered accounts in PXE in the current contract and makes them available\n/// for later querying via the `get_notes` oracle.\npub fn sync_notes() {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        sync_notes_oracle_wrapper();\n    }\n}\n\nunconstrained fn sync_notes_oracle_wrapper() {\n    sync_notes_oracle();\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle() {}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"137":{"source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/oracle/random.nr"},"141":{"source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    storage::map::derive_storage_slot_in_map,\n    traits::{Deserialize, Serialize, ToField},\n};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<T, N> for Map<K, T, Context>\nwhere\n    T: Serialize<N> + Deserialize<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"145":{"source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n    hash::poseidon2_hash_with_separator,\n    traits::{Deserialize, Serialize},\n};\n\nuse crate::context::{PrivateContext, UnconstrainedContext};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_note, view_notes},\n    note_interface::{NoteInterface, NullifiableNote},\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateMutable<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nmod test;\n\nimpl<T, Context, let N: u32> Storage<T, N> for PrivateMutable<T, Context>\nwhere\n    T: Serialize<N> + Deserialize<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateMutable<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateMutable>` type (for example), because the storage slot often also identifies an actor. e.g.\n    // the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    // Note: subsequent nullification of this state variable, via the `replace` method will not be leaky, if the `compute_nullifier()` method of the underlying note is designed to ensure privacy.\n    // For example, if the `compute_nullifier()` method injects the secret key of a note owner into the computed nullifier's preimage.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        poseidon2_hash_with_separator(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )\n    }\n}\n\nimpl<Note, let N: u32> PrivateMutable<Note, &mut PrivateContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // docs:start:initialize\n    pub fn initialize(self, note: &mut Note) -> NoteEmission<Note> {\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.push_nullifier(nullifier);\n\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(self, new_note: &mut Note) -> NoteEmission<Note> {\n        let (prev_note, note_hash_for_read_request): (Note, Field) =\n            get_note(self.context, self.storage_slot);\n\n        // Nullify previous note.\n        destroy_note_unsafe(self.context, prev_note, note_hash_for_read_request);\n\n        // Add replacement note.\n        create_note(self.context, self.storage_slot, new_note)\n    }\n    // docs:end:replace\n\n    pub fn initialize_or_replace(self, note: &mut Note) -> NoteEmission<Note> {\n        // `check_nullifier_exists` is an unconstrained function - we can constrain a true value by providing an\n        // inclusion proof of the nullifier, but cannot constrain a false value since a non-inclusion proof would only\n        // be valid if done in public.\n        // Ultimately, this is not an issue ginen that we'll either:\n        //  - initialize the state variable, which would fail if it was already initialized due to the duplicate\n        //    nullifier, or\n        //  - replace the current value, which would fail if it was not initialized since we wouldn't be able to produce\n        //    an inclusion proof for the current note\n        // This means that an honest oracle will assist the prover to produce a valid proof, while a malicious oracle\n        // (i.e. one that returns an incorrect value for is_initialized) will simply fail to produce a proof.\n        let is_initialized =\n            unsafe { check_nullifier_exists(self.compute_initialization_nullifier()) };\n\n        if (!is_initialized) {\n            self.initialize(note)\n        } else {\n            self.replace(note)\n        }\n    }\n\n    // docs:start:get_note\n    pub fn get_note(self) -> NoteEmission<Note> {\n        let mut (note, note_hash_for_read_request) = get_note(self.context, self.storage_slot);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note_unsafe(self.context, note, note_hash_for_read_request);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(self.context, self.storage_slot, &mut note)\n    }\n    // docs:end:get_note\n}\n\nimpl<Note, let N: u32> PrivateMutable<Note, UnconstrainedContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    pub unconstrained fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n\n    // docs:start:view_note\n    pub unconstrained fn view_note(self) -> Note {\n        let mut options = NoteViewerOptions::new();\n        view_notes(self.storage_slot, options.set_limit(1)).get(0)\n    }\n    // docs:end:view_note\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/state_vars/private_mutable.nr"},"148":{"source":"use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext},\n    state_vars::storage::Storage,\n};\nuse dep::protocol_types::{\n    constants::INITIALIZATION_SLOT_SEPARATOR,\n    traits::{Deserialize, Serialize},\n};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\nimpl<T, Context, let N: u32> Storage<T, N> for PublicImmutable<T, Context>\nwhere\n    T: Serialize<N> + Deserialize<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicImmutable<T, &mut PublicContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    // docs:start:public_immutable_struct_write\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicImmutable<T, UnconstrainedContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicImmutable<T, &mut PrivateContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    pub fn read(self) -> T {\n        let header = self.context.get_block_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] = header.public_storage_historical_read(\n                self.storage_slot + i as Field,\n                (*self.context).this_address(),\n            );\n        }\n        T::deserialize(fields)\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr"},"149":{"source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<T, N> for PublicMutable<T, Context>\nwhere\n    T: Serialize<N> + Deserialize<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, &mut PublicContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, UnconstrainedContext>\nwhere\n    T: Deserialize<T_SERIALIZED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"169":{"source":"/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must be large enough to hold all of\n/// the elements past `offset`.\n///\n/// Example:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n/// ```\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr"},"170":{"source":"// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 bytes.\n//\n// Each 31 byte chunk is converted into a Field as if the chunk was the Field's big endian representation. If the last chunk\n// is less than 31 bytes long, then only the relevant bytes are conisdered.\n// For example, [1, 10, 3] is encoded as [1 * 256^2 + 10 * 256 + 3]\npub fn bytes_to_fields<let N: u32>(input: [u8; N]) -> [Field; (N + 30) / 31] {\n    let mut dst = [0; (N + 30) / 31];\n\n    for dst_index in 0..((N + 30) / 31) {\n        let mut field_value = 0;\n\n        for i in 0..31 {\n            let byte_index = dst_index * 31 + i;\n            if byte_index < N {\n                // Shift the existing value left by 8 bits and add the new byte\n                field_value = field_value * 256 + input[byte_index] as Field;\n            }\n        }\n\n        dst[dst_index] = field_value;\n    }\n\n    dst\n}\n\n// Converts an input array of fields into bytes. Each field of input has to contain only 31 bytes.\n// TODO(#8618): Optimize for public use.\npub fn fields_to_bytes<let N: u32, let M: u32>(input: [Field; M]) -> [u8; N] {\n    let mut dst = [0; N];\n\n    for src_index in 0..M {\n        let field = input[src_index];\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let src: [u8; 31] = field.to_be_bytes();\n\n        // Since some of the bytes might not be occupied (if the source value requiring less than 31 bytes),\n        // we have to compute the start index from which to copy.\n        let remaining_bytes = N - src_index * 31;\n        let src_start_index = if remaining_bytes < 31 {\n            // If the remaining bytes are less than 31, we only copy the remaining bytes\n            31 - remaining_bytes\n        } else {\n            0\n        };\n\n        // Note: I tried combining this check with `assert_max_bit_size` above but `assert_max_bit_size` expects\n        // the argument to be a constant. Using comptime block to derive the number of bits also does not work\n        // because comptime is evaluated before generics.\n        for i in 0..src_start_index {\n            assert(src[i] == 0, \"Field does not fit into remaining bytes\");\n        }\n\n        for i in 0..31 {\n            let byte_index = src_index * 31 + i;\n            if byte_index < N {\n                dst[byte_index] = src[src_start_index + i];\n            }\n        }\n    }\n\n    dst\n}\n\nmod test {\n    use crate::utils::bytes::{bytes_to_fields, fields_to_bytes};\n\n    #[test]\n    fn test_bytes_to_1_field() {\n        let input = [\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31,\n        ];\n        let output = bytes_to_fields(input);\n\n        assert_eq(output[0], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f);\n    }\n\n    #[test]\n    fn test_1_field_to_bytes() {\n        let input = [0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f];\n        let output: [u8; 31] = fields_to_bytes(input);\n\n        assert_eq(\n            output,\n            [\n                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n                24, 25, 26, 27, 28, 29, 30, 31,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_3_small_fields_to_bytes() {\n        let input = [1, 2, 3];\n        let output: [u8; 93] = fields_to_bytes(input);\n\n        // Each field should occupy 31 bytes with the non-zero value being placed in the last one.\n        assert_eq(\n            output,\n            [\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 3,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_3_small_fields_to_less_bytes() {\n        let input = [1, 2, 3];\n        let output: [u8; 63] = fields_to_bytes(input);\n\n        // First 2 fields should occupy 31 bytes with the non-zero value being placed in the last one while the last\n        // field should occupy 1 byte. There is not information destruction here because the last field fits into\n        // 1 byte.\n        assert_eq(\n            output,\n            [\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 2, 3,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_bytes_to_2_fields() {\n        let input = [\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,\n            47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        ];\n        let output = bytes_to_fields(input);\n\n        assert_eq(output[0], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f);\n        assert_eq(output[1], 0x202122232425262728292a2b2c2d2e2f303132333435363738393a3b);\n    }\n\n    #[test]\n    fn test_2_fields_to_bytes() {\n        let input = [\n            0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f,\n            0x202122232425262728292a2b2c2d2e2f303132333435363738393a3b,\n        ];\n        let output: [u8; 62] = fields_to_bytes(input);\n\n        assert_eq(\n            output,\n            [\n                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n                24, 25, 26, 27, 28, 29, 30, 31, 0, 0, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\n                43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_large_random_input_to_fields_and_back(input: [u8; 128]) {\n        let output = bytes_to_fields(input);\n        let input_back: [u8; 128] = fields_to_bytes(output);\n\n        assert_eq(input, input_back);\n    }\n\n    // I need to get an array of random values lower than 2^248 on input and since there is no u248 type and modulo\n    // operation is not supported on a Field (to do field % 2^248), I will take multiple smaller values and combine\n    // them to get a value lower than 2^248.\n    #[test]\n    fn test_large_random_input_to_bytes_and_back(\n        input1: [u64; 5],\n        input2: [u64; 5],\n        input3: [u64; 5],\n        input4: [u32; 5],\n        input5: [u16; 5],\n        input6: [u8; 5],\n    ) {\n        let mut input = [0; 5];\n        for i in 0..5 {\n            input[i] = (input1[i] as Field * 2.pow_32(184))\n                + (input2[i] as Field * 2.pow_32(120))\n                + (input3[i] as Field * 2.pow_32(56))\n                + (input4[i] as Field * 2.pow_32(24))\n                + (input5[i] as Field * 2.pow_32(8))\n                + input6[i] as Field;\n        }\n\n        let output: [u8; 155] = fields_to_bytes(input);\n        let input_back = bytes_to_fields(output);\n\n        assert_eq(input, input_back);\n    }\n\n    #[test(should_fail_with = \"Field does not fit into remaining bytes\")]\n    fn test_too_few_destination_bytes() {\n        // We should get an error here because first field gets converted to 31 bytes and the second field needs\n        // at least 2 bytes but we provide it with 1.\n        let input = [1, 256];\n        let _ignored_result: [u8; 32] = fields_to_bytes(input);\n    }\n\n    #[test(should_fail_with = \"call to assert_max_bit_size\")]\n    fn test_fields_to_bytes_value_too_large() {\n        let input = [2.pow_32(248)];\n        let _ignored_result: [u8; 31] = fields_to_bytes(input);\n    }\n\n    #[test]\n    fn test_fields_to_bytes_max_value() {\n        let input = [2.pow_32(248) - 1];\n        let result: [u8; 31] = fields_to_bytes(input);\n\n        // We check that all the bytes were set to max value (255)\n        for i in 0..31 {\n            assert_eq(result[i], 255);\n        }\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/utils/bytes.nr"},"173":{"source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use crate::utils::point::point_to_bytes;\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/utils/point.nr"},"191":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"225":{"source":"use crate::{point::Point, traits::{Deserialize, Empty, Serialize}};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pub pk_m: Point,\n    pub sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [self.pk_m.x, self.pk_m.y, self.pk_m.is_infinite as Field, self.sk_app]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool },\n            sk_app: fields[3],\n        }\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr"},"232":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        MAX_FIELD_VALUE,\n    },\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n    traits::{Deserialize, Empty, FromField, Serialize, ToField},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse ec::{pow, sqrt};\nuse std::embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secrect can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        function_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            function_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"248":{"source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr"},"249":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedLogHash},\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::scoped::Scoped,\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::utils::{arrays::array_concat, field::field_from_bytes};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [tx_hash, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    tx_hash: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\npub fn compute_tx_logs_hash<let N: u32>(logs: [LogHash; N]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; N * 32];\n    for offset in 0..N {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> std::hash::poseidon2::Poseidon2 {\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: std::hash::poseidon2::Poseidon2,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> std::hash::poseidon2::Poseidon2 {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: std::hash::poseidon2::Poseidon2,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> std::hash::poseidon2::Poseidon2 {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let two_pow_64 = 18446744073709551616;\n    let empty_sponge = std::hash::poseidon2::Poseidon2::new((in_len as Field) * two_pow_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut contructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(contructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == contructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"250":{"source":"use crate::traits::{Deserialize, Serialize};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr"},"265":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"274":{"source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr"},"277":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"290":{"source":"use crate::meta::{derive_deserialize, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"294":{"source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"310":{"source":"pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nfn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = unsafe { find_index_hint(values, |v: Field| min.lt(v)) };\n    assert_eq(index, 2);\n}\n\n#[test]\nfn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = unsafe { find_index_hint(values, |v: Field| min.lt(v)) };\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concated = array_concat(array0, array1);\n    assert_eq(concated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr"},"313":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"318":{"source":"// Elliptic curve implementation\n// Overview\n// ========\n// The following three elliptic curve representations are admissible:\npub mod tecurve; // Twisted Edwards curves\npub mod swcurve; // Elliptic curves in Short Weierstrass form\npub mod montcurve; // Montgomery curves\npub mod consts; // Commonly used curve presets\n//\n// Note that Twisted Edwards and Montgomery curves are (birationally) equivalent, so that\n// they may be freely converted between one another, whereas Short Weierstrass curves are\n// more general. Diagramatically:\n//\n// tecurve == montcurve `subset` swcurve\n//\n// Each module is further divided into two submodules, 'affine' and 'curvegroup', depending\n// on the preferred coordinate representation. Affine coordinates are none other than the usual\n// two-dimensional Cartesian coordinates used in the definitions of these curves, whereas\n// 'CurveGroup' coordinates (terminology borrowed from Arkworks, whose conventions we try\n// to follow) are special coordinate systems with respect to which the group operations may be\n// implemented more efficiently, usually by means of an appropriate choice of projective coordinates.\n//\n// In each of these submodules, there is a Point struct and a Curve struct, the former\n// representing a point in the coordinate system and the latter a curve configuration.\n//\n// Points\n// ======\n// Points may be instantiated using the associated function `new`, which takes coordinates\n// as its arguments. For instance,\n//\n// `let p = swcurve::Point::new(1,1);`\n//\n// The additive identity may be constructed by a call to the associated function `zero` of no\n// arguments:\n//\n// `let zero = swcurve::Point::zero();`\n//\n// Points may be tested for equality by calling the method `eq`:\n//\n// `let pred = p.eq(zero);`\n//\n// There is also the method `is_zero` to explicitly check whether a point is the additive identity:\n//\n// `constrain pred == p.is_zero();`\n//\n// Points may be negated by calling the `negate` method and converted to CurveGroup (or affine)\n// coordinates by calling the `into_group` (resp. `into_affine`) method on them. Finally,\n// Points may be freely mapped between their respective Twisted Edwards and Montgomery\n// representations by calling the `into_montcurve` or `into_tecurve` methods. For mappings\n// between Twisted Edwards/Montgomery curves and Short Weierstrass curves, see the Curve section\n// below, as the underlying mappings are those of curves rather than ambient spaces.\n// As a rule, Points in affine (or CurveGroup) coordinates are mapped to Points in affine\n// (resp. CurveGroup) coordinates.\n//\n// Curves\n// ======\n// A curve configuration (Curve) is completely determined by the Field coefficients of its defining\n// equation (a and b in the case of swcurve, a and d in the case of tecurve, and j and k in\n// the case of montcurve) together with a generator (`gen`) in the corresponding coordinate system.\n// For example, the Baby Jubjub curve configuration as defined in ERC-2494 may be instantiated as a Twisted\n// Edwards curve in affine coordinates as follows:\n//\n// `let bjj_affine = tecurve::Curve::new(168700, 168696, tecurve::Point::new(995203441582195749578291179787384436505546430278305826713579947235728471134,5472060717959818805561601436314318772137091100104008585924551046643952123905));`\n//\n// The `contains` method may be used to check whether a Point lies on a given curve:\n//\n// `constrain bjj_affine.contains(tecurve::Point::zero());`\n//\n// The elliptic curve group's addition operation is exposed as the `add` method, e.g.\n//\n// `let p = bjj_affine.add(bjj_affine.gen, bjj_affine.gen);`\n//\n// subtraction as the `subtract` method, e.g.\n//\n// `constrain tecurve::Point::zero().eq(bjj_affine.subtract(bjj_affine.gen, bjj_affine.gen));`\n//\n// scalar multiplication as the `mul` method, where the scalar is assumed to be a Field* element, e.g.\n//\n// `constrain tecurve::Point::zero().eq(bjj_affine.mul(2, tecurve::Point::zero());`\n//\n// There is a scalar multiplication method (`bit_mul`) provided where the scalar input is expected to be\n// an array of bits (little-endian convention), as well as a multi-scalar multiplication method** (`msm`)\n// which takes an array of Field elements and an array of elliptic curve points as arguments, both assumed\n// to be of the same length.\n//\n// Curve configurations may be converted between different coordinate representations by calling the `into_group`\n// and `into_affine` methods on them, e.g.\n//\n// `let bjj_curvegroup = bjj_affine.into_group();`\n//\n// Curve configurations may also be converted between different curve representations by calling the `into_swcurve`,\n// `into_montcurve` and `into_tecurve` methods subject to the relation between the curve representations mentioned\n// above. Note that it is possible to map Points from a Twisted Edwards/Montgomery curve to the corresponding\n// Short Weierstrass representation and back, and the methods to do so are exposed as `map_into_swcurve` and\n// `map_from_swcurve`, which each take one argument, the point to be mapped.\n//\n// Curve maps\n// ==========\n// There are a few different ways of mapping Field elements to elliptic curves. Here we provide the simplified\n// Shallue-van de Woestijne-Ulas and Elligator 2 methods, the former being applicable to all curve types\n// provided above subject to the constraint that the coefficients of the corresponding Short Weierstrass curve satisfies\n// a*b != 0 and the latter being applicable to Montgomery and Twisted Edwards curves subject to the constraint that\n// the coefficients of the corresponding Montgomery curve satisfy j*k != 0 and (j^2 - 4)/k^2 is non-square.\n//\n// The simplified Shallue-van de Woestijne-Ulas method is exposed as the method `swu_map` on the Curve configuration and\n// depends on two parameters, a Field element z != -1 for which g(x) - z is irreducible over Field and g(b/(z*a)) is\n// square, where g(x) = x^3 + a*x + b is the right-hand side of the defining equation of the corresponding Short\n// Weierstrass curve, and a Field element u to be mapped onto the curve. For example, in the case of bjj_affine above,\n// it may be determined using the scripts provided at <https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve> that z = 5.\n//\n// The Elligator 2 method is exposed as the method `elligator2_map` on the Curve configurations of Montgomery and\n// Twisted Edwards curves. Like the simplified SWU method above, it depends on a certain non-square element of Field,\n// but this element need not satisfy any further conditions, so it is included as the (Field-dependent) constant\n//`ZETA` below. Thus, the `elligator2_map` method depends only on one parameter, the Field element to be mapped onto\n// the curve.\n//\n// For details on all of the above in the context of hashing to elliptic curves, see <https://datatracker.ietf.org/doc/id/draft-irtf-cfrg-hash-to-curve-06.html>.\n//\n//\n// *TODO: Replace Field with Bigint.\n// **TODO: Support arrays of structs to make this work.\n// Field-dependent constant ZETA = a non-square element of Field\n// Required for Elligator 2 map\n// TODO: Replace with built-in constant.\nglobal ZETA: Field = 5;\n// Field-dependent constants for Tonelli-Shanks algorithm (see sqrt function below)\n// TODO: Possibly make this built-in.\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n// Higher-order version of scalar multiplication\n// TODO: Make this work so that the submodules' bit_mul may be defined in terms of it.\n//fn bit_mul<T,N>(add: fn(T,T) -> T, e: T, bits: [u1; N], p: T) -> T {\n//    let mut out = e;\n//    let n = bits.len();\n//\n//    for i in 0..n {\n//        out = add(\n//            add(out, out),\n//            if(bits[n - i - 1] == 0) {e} else {p});\n//    }\n//\n//    out\n//}\n// TODO: Make this built-in.\npub fn safe_inverse(x: Field) -> Field {\n    if x == 0 {\n        0\n    } else {\n        1 / x\n    }\n}\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\npub fn is_square(x: Field) -> bool {\n    let v = pow(x, 0 - 1 / 2);\n\n    v * (v - 1) == 0\n}\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\nmod tests {\n    use crate::montcurve::affine::Point as MGaffine;\n    use crate::montcurve::curvegroup::Point as MG;\n    use crate::swcurve::affine::Point as SWGaffine;\n    use crate::swcurve::curvegroup::Point as SWG;\n    use crate::tecurve::affine::Curve as AffineCurve;\n    use crate::tecurve::affine::Point as Gaffine;\n    use crate::tecurve::curvegroup::Point as G;\n\n    #[test]\n    fn smoke_test() {\n        // Tests may be checked against https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve/tree/main/poc\n        // Define Baby Jubjub (ERC-2494) parameters in affine representation\n        let bjj_affine = AffineCurve::new(\n            168700,\n            168696,\n            Gaffine::new(\n                995203441582195749578291179787384436505546430278305826713579947235728471134,\n                5472060717959818805561601436314318772137091100104008585924551046643952123905,\n            ),\n        );\n        // Test addition\n        let p1_affine = Gaffine::new(\n            17777552123799933955779906779655732241715742912184938656739573121738514868268,\n            2626589144620713026669568689430873010625803728049924121243784502389097019475,\n        );\n        let p2_affine = Gaffine::new(\n            16540640123574156134436876038791482806971768689494387082833631921987005038935,\n            20819045374670962167435360035096875258406992893633759881276124905556507972311,\n        );\n\n        let p3_affine = bjj_affine.add(p1_affine, p2_affine);\n        assert(p3_affine.eq(Gaffine::new(\n            7916061937171219682591368294088513039687205273691143098332585753343424131937,\n            14035240266687799601661095864649209771790948434046947201833777492504781204499,\n        )));\n        // Test scalar multiplication\n        let p4_affine = bjj_affine.mul(2, p1_affine);\n        assert(p4_affine.eq(Gaffine::new(\n            6890855772600357754907169075114257697580319025794532037257385534741338397365,\n            4338620300185947561074059802482547481416142213883829469920100239455078257889,\n        )));\n        assert(p4_affine.eq(bjj_affine.bit_mul([0, 1], p1_affine)));\n        // Test subtraction\n        let p5_affine = bjj_affine.subtract(p3_affine, p3_affine);\n        assert(p5_affine.eq(Gaffine::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_affine.contains(bjj_affine.gen)\n                & bjj_affine.contains(p1_affine)\n                & bjj_affine.contains(p2_affine)\n                & bjj_affine.contains(p3_affine)\n                & bjj_affine.contains(p4_affine)\n                & bjj_affine.contains(p5_affine),\n        );\n        // Test CurveGroup equivalents\n        let bjj = bjj_affine.into_group(); // Baby Jubjub\n        let p1 = p1_affine.into_group();\n        let p2 = p2_affine.into_group();\n        let p3 = p3_affine.into_group();\n        let p4 = p4_affine.into_group();\n        let p5 = p5_affine.into_group();\n        // Test addition\n        assert(p3.eq(bjj.add(p1, p2)));\n        // Test scalar multiplication\n        assert(p4.eq(bjj.mul(2, p1)));\n        assert(p4.eq(bjj.bit_mul([0, 1], p1)));\n        // Test subtraction\n        assert(G::zero().eq(bjj.subtract(p3, p3)));\n        assert(p5.eq(G::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj.contains(bjj.gen)\n                & bjj.contains(p1)\n                & bjj.contains(p2)\n                & bjj.contains(p3)\n                & bjj.contains(p4)\n                & bjj.contains(p5),\n        );\n        // Test SWCurve equivalents of the above\n        // First the affine representation\n        let bjj_swcurve_affine = bjj_affine.into_swcurve();\n\n        let p1_swcurve_affine = bjj_affine.map_into_swcurve(p1_affine);\n        let p2_swcurve_affine = bjj_affine.map_into_swcurve(p2_affine);\n        let p3_swcurve_affine = bjj_affine.map_into_swcurve(p3_affine);\n        let p4_swcurve_affine = bjj_affine.map_into_swcurve(p4_affine);\n        let p5_swcurve_affine = bjj_affine.map_into_swcurve(p5_affine);\n        // Addition\n        assert(p3_swcurve_affine.eq(bjj_swcurve_affine.add(p1_swcurve_affine, p2_swcurve_affine)));\n        // Doubling\n        assert(p4_swcurve_affine.eq(bjj_swcurve_affine.mul(2, p1_swcurve_affine)));\n        assert(p4_swcurve_affine.eq(bjj_swcurve_affine.bit_mul([0, 1], p1_swcurve_affine)));\n        // Subtraction\n        assert(SWGaffine::zero().eq(bjj_swcurve_affine.subtract(\n            p3_swcurve_affine,\n            p3_swcurve_affine,\n        )));\n        assert(p5_swcurve_affine.eq(SWGaffine::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_swcurve_affine.contains(bjj_swcurve_affine.gen)\n                & bjj_swcurve_affine.contains(p1_swcurve_affine)\n                & bjj_swcurve_affine.contains(p2_swcurve_affine)\n                & bjj_swcurve_affine.contains(p3_swcurve_affine)\n                & bjj_swcurve_affine.contains(p4_swcurve_affine)\n                & bjj_swcurve_affine.contains(p5_swcurve_affine),\n        );\n        // Then the CurveGroup representation\n        let bjj_swcurve = bjj.into_swcurve();\n\n        let p1_swcurve = bjj.map_into_swcurve(p1);\n        let p2_swcurve = bjj.map_into_swcurve(p2);\n        let p3_swcurve = bjj.map_into_swcurve(p3);\n        let p4_swcurve = bjj.map_into_swcurve(p4);\n        let p5_swcurve = bjj.map_into_swcurve(p5);\n        // Addition\n        assert(p3_swcurve.eq(bjj_swcurve.add(p1_swcurve, p2_swcurve)));\n        // Doubling\n        assert(p4_swcurve.eq(bjj_swcurve.mul(2, p1_swcurve)));\n        assert(p4_swcurve.eq(bjj_swcurve.bit_mul([0, 1], p1_swcurve)));\n        // Subtraction\n        assert(SWG::zero().eq(bjj_swcurve.subtract(p3_swcurve, p3_swcurve)));\n        assert(p5_swcurve.eq(SWG::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_swcurve.contains(bjj_swcurve.gen)\n                & bjj_swcurve.contains(p1_swcurve)\n                & bjj_swcurve.contains(p2_swcurve)\n                & bjj_swcurve.contains(p3_swcurve)\n                & bjj_swcurve.contains(p4_swcurve)\n                & bjj_swcurve.contains(p5_swcurve),\n        );\n        // Test MontCurve conversions\n        // First the affine representation\n        let bjj_montcurve_affine = bjj_affine.into_montcurve();\n\n        let p1_montcurve_affine = p1_affine.into_montcurve();\n        let p2_montcurve_affine = p2_affine.into_montcurve();\n        let p3_montcurve_affine = p3_affine.into_montcurve();\n        let p4_montcurve_affine = p4_affine.into_montcurve();\n        let p5_montcurve_affine = p5_affine.into_montcurve();\n        // Addition\n        assert(p3_montcurve_affine.eq(bjj_montcurve_affine.add(\n            p1_montcurve_affine,\n            p2_montcurve_affine,\n        )));\n        // Doubling\n        assert(p4_montcurve_affine.eq(bjj_montcurve_affine.mul(2, p1_montcurve_affine)));\n        assert(p4_montcurve_affine.eq(bjj_montcurve_affine.bit_mul([0, 1], p1_montcurve_affine)));\n        // Subtraction\n        assert(MGaffine::zero().eq(bjj_montcurve_affine.subtract(\n            p3_montcurve_affine,\n            p3_montcurve_affine,\n        )));\n        assert(p5_montcurve_affine.eq(MGaffine::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_montcurve_affine.contains(bjj_montcurve_affine.gen)\n                & bjj_montcurve_affine.contains(p1_montcurve_affine)\n                & bjj_montcurve_affine.contains(p2_montcurve_affine)\n                & bjj_montcurve_affine.contains(p3_montcurve_affine)\n                & bjj_montcurve_affine.contains(p4_montcurve_affine)\n                & bjj_montcurve_affine.contains(p5_montcurve_affine),\n        );\n        // Then the CurveGroup representation\n        let bjj_montcurve = bjj.into_montcurve();\n\n        let p1_montcurve = p1_montcurve_affine.into_group();\n        let p2_montcurve = p2_montcurve_affine.into_group();\n        let p3_montcurve = p3_montcurve_affine.into_group();\n        let p4_montcurve = p4_montcurve_affine.into_group();\n        let p5_montcurve = p5_montcurve_affine.into_group();\n        // Addition\n        assert(p3_montcurve.eq(bjj_montcurve.add(p1_montcurve, p2_montcurve)));\n        // Doubling\n        assert(p4_montcurve.eq(bjj_montcurve.mul(2, p1_montcurve)));\n        assert(p4_montcurve.eq(bjj_montcurve.bit_mul([0, 1], p1_montcurve)));\n        // Subtraction\n        assert(MG::zero().eq(bjj_montcurve.subtract(p3_montcurve, p3_montcurve)));\n        assert(p5_montcurve.eq(MG::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_montcurve.contains(bjj_montcurve.gen)\n                & bjj_montcurve.contains(p1_montcurve)\n                & bjj_montcurve.contains(p2_montcurve)\n                & bjj_montcurve.contains(p3_montcurve)\n                & bjj_montcurve.contains(p4_montcurve)\n                & bjj_montcurve.contains(p5_montcurve),\n        );\n        // Elligator 2 map-to-curve\n        let ell2_pt_map = bjj_affine.elligator2_map(27);\n\n        assert(ell2_pt_map.eq(MGaffine::new(\n            7972459279704486422145701269802978968072470631857513331988813812334797879121,\n            8142420778878030219043334189293412482212146646099536952861607542822144507872,\n        )\n            .into_tecurve()));\n        // SWU map-to-curve\n        let swu_pt_map = bjj_affine.swu_map(5, 27);\n\n        assert(swu_pt_map.eq(bjj_affine.map_from_swcurve(SWGaffine::new(\n            2162719247815120009132293839392097468339661471129795280520343931405114293888,\n            5341392251743377373758788728206293080122949448990104760111875914082289313973,\n        ))));\n    }\n\n}\n","path":"/home/john-play/nargo/github.com/noir-lang/ec/v0.1.2/src/lib.nr"},"322":{"source":"// docs:start:token_all\n// docs:start:imports\nmod types;\nmod test;\n\nuse dep::aztec::macros::aztec;\n\n// Minimal token implementation that supports `AuthWit` accounts.\n// The auth message follows a similar pattern to the cross-chain message and includes a designated caller.\n// The designated caller is ALWAYS used here, and not based on a flag as cross-chain.\n// message hash = H([caller, contract, selector, ...args])\n// To be read as `caller` calls function at `contract` defined by `selector` with `args`\n// Including a nonce in the message hash ensures that the message can only be used once.\n#[aztec]\ncontract Token {\n    // Libs\n    use std::meta::derive;\n\n    use dep::compressed_string::FieldCompressedString;\n\n    use dep::aztec::{\n        context::{PrivateCallInterface, PrivateContext},\n        encrypted_logs::{\n            encrypted_event_emission::encode_and_encrypt_event_unconstrained,\n            encrypted_note_emission::encode_and_encrypt_note_unconstrained,\n        },\n        macros::{\n            events::event,\n            functions::{initializer, internal, private, public, view},\n            storage::storage,\n        },\n        oracle::random::random,\n        prelude::{\n            AztecAddress, FunctionSelector, Map, PublicContext, PublicImmutable, PublicMutable,\n        },\n        protocol_types::{point::Point, traits::Serialize},\n    };\n\n    use dep::uint_note::uint_note::UintNote;\n\n    // docs:start:import_authwit\n    use dep::authwit::auth::{\n        assert_current_call_valid_authwit, assert_current_call_valid_authwit_public,\n        compute_authwit_nullifier,\n    };\n    // docs:end:import_authwit\n\n    use crate::types::balance_set::BalanceSet;\n\n    // docs:end::imports\n\n    // In the first transfer iteration we are computing a lot of additional information (validating inputs, retrieving\n    // keys, etc.), so the gate count is already relatively high. We therefore only read a few notes to keep the happy\n    // case with few constraints.\n    global INITIAL_TRANSFER_CALL_MAX_NOTES: u32 = 2;\n    // All the recursive call does is nullify notes, meaning the gate count is low, but it is all constant overhead. We\n    // therefore read more notes than in the base case to increase the efficiency of the overhead, since this results in\n    // an overall small circuit regardless.\n    global RECURSIVE_TRANSFER_CALL_MAX_NOTES: u32 = 8;\n\n    #[derive(Serialize)]\n    #[event]\n    struct Transfer {\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n    }\n\n    // docs:start:storage_struct\n    #[storage]\n    struct Storage<Context> {\n        // docs:start:storage_admin\n        admin: PublicMutable<AztecAddress, Context>,\n        // docs:end:storage_admin\n        // docs:start:storage_minters\n        minters: Map<AztecAddress, PublicMutable<bool, Context>, Context>,\n        // docs:end:storage_minters\n        // docs:start:storage_balances\n        balances: Map<AztecAddress, BalanceSet<Context>, Context>,\n        // docs:end:storage_balances\n        total_supply: PublicMutable<U128, Context>,\n        public_balances: Map<AztecAddress, PublicMutable<U128, Context>, Context>,\n        symbol: PublicImmutable<FieldCompressedString, Context>,\n        name: PublicImmutable<FieldCompressedString, Context>,\n        // docs:start:storage_decimals\n        decimals: PublicImmutable<u8, Context>,\n        // docs:end:storage_decimals\n    }\n    // docs:end:storage_struct\n\n    // docs:start:constructor\n    #[public]\n    #[initializer]\n    fn constructor(admin: AztecAddress, name: str<31>, symbol: str<31>, decimals: u8) {\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.admin.write(admin);\n        storage.minters.at(admin).write(true);\n        storage.name.initialize(FieldCompressedString::from_string(name));\n        storage.symbol.initialize(FieldCompressedString::from_string(symbol));\n        // docs:start:initialize_decimals\n        storage.decimals.initialize(decimals);\n        // docs:end:initialize_decimals\n    }\n    // docs:end:constructor\n\n    // docs:start:set_admin\n    #[public]\n    fn set_admin(new_admin: AztecAddress) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        // docs:start:write_admin\n        storage.admin.write(new_admin);\n        // docs:end:write_admin\n    }\n    // docs:end:set_admin\n\n    #[public]\n    #[view]\n    fn public_get_name() -> FieldCompressedString {\n        storage.name.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_name() -> FieldCompressedString {\n        storage.name.read()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_decimals() -> pub u8 {\n        storage.decimals.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_decimals() -> pub u8 {\n        storage.decimals.read()\n    }\n\n    // docs:start:admin\n    #[public]\n    #[view]\n    fn get_admin() -> Field {\n        storage.admin.read().to_field()\n    }\n    // docs:end:admin\n\n    // docs:start:is_minter\n    #[public]\n    #[view]\n    fn is_minter(minter: AztecAddress) -> bool {\n        storage.minters.at(minter).read()\n    }\n    // docs:end:is_minter\n\n    // docs:start:total_supply\n    #[public]\n    #[view]\n    fn total_supply() -> Field {\n        storage.total_supply.read().to_integer()\n    }\n    // docs:end:total_supply\n\n    // docs:start:balance_of_public\n    #[public]\n    #[view]\n    fn balance_of_public(owner: AztecAddress) -> Field {\n        storage.public_balances.at(owner).read().to_integer()\n    }\n    // docs:end:balance_of_public\n\n    // docs:start:set_minter\n    #[public]\n    fn set_minter(minter: AztecAddress, approve: bool) {\n        // docs:start:read_admin\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        // docs:end:read_admin\n        // docs:start:write_minter\n        storage.minters.at(minter).write(approve);\n        // docs:end:write_minter\n    }\n    // docs:end:set_minter\n\n    // docs:start:mint_to_public\n    #[public]\n    fn mint_to_public(to: AztecAddress, amount: Field) {\n        // docs:start:read_minter\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not minter\");\n        // docs:end:read_minter\n        let amount = U128::from_integer(amount);\n        let new_balance = storage.public_balances.at(to).read().add(amount);\n        let supply = storage.total_supply.read().add(amount);\n        storage.public_balances.at(to).write(new_balance);\n        storage.total_supply.write(supply);\n    }\n    // docs:end:mint_to_public\n\n    // docs:start:transfer_in_public\n    #[public]\n    fn transfer_in_public(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        let amount = U128::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n        let to_balance = storage.public_balances.at(to).read().add(amount);\n        storage.public_balances.at(to).write(to_balance);\n    }\n    // docs:end:transfer_in_public\n\n    // docs:start:burn_public\n    #[public]\n    fn burn_public(from: AztecAddress, amount: Field, nonce: Field) {\n        // docs:start:assert_current_call_valid_authwit_public\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        // docs:end:assert_current_call_valid_authwit_public\n        let amount = U128::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n        let new_supply = storage.total_supply.read().sub(amount);\n        storage.total_supply.write(new_supply);\n    }\n    // docs:end:burn_public\n\n    // docs:start:transfer_to_public\n    #[private]\n    fn transfer_to_public(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        // TODO: constrain encryption below - we are using unconstrained here only because of the following Noir issue\n        // https://github.com/noir-lang/noir/issues/5771\n        storage.balances.at(from).sub(from, U128::from_integer(amount)).emit(\n            encode_and_encrypt_note_unconstrained(&mut context, from, from),\n        );\n        Token::at(context.this_address())._increase_public_balance(to, amount).enqueue(&mut context);\n    }\n    // docs:end:transfer_to_public\n\n    // docs:start:transfer\n    #[private]\n    fn transfer(to: AztecAddress, amount: Field) {\n        let from = context.msg_sender();\n\n        let amount = U128::from_integer(amount);\n        // We reduce `from`'s balance by amount by recursively removing notes over potentially multiple calls. This\n        // method keeps the gate count for each individual call low - reading too many notes at once could result in\n        // circuits in which proving is not feasible.\n        // Since the sum of the amounts in the notes we nullified was potentially larger than amount, we create a new\n        // note for `from` with the change amount, e.g. if `amount` is 10 and two notes are nullified with amounts 8 and\n        // 5, then the change will be 3 (since 8 + 5 - 10 = 3).\n        let change = subtract_balance(\n            &mut context,\n            storage,\n            from,\n            amount,\n            INITIAL_TRANSFER_CALL_MAX_NOTES,\n        );\n        storage.balances.at(from).add(from, change).emit(encode_and_encrypt_note_unconstrained(\n            &mut context,\n            from,\n            from,\n        ));\n        storage.balances.at(to).add(to, amount).emit(encode_and_encrypt_note_unconstrained(\n            &mut context,\n            to,\n            from,\n        ));\n        // We don't constrain encryption of the note log in `transfer` (unlike in `transfer_in_private`) because the transfer\n        // function is only designed to be used in situations where the event is not strictly necessary (e.g. payment to\n        // another person where the payment is considered to be successful when the other party successfully decrypts a\n        // note).\n        Transfer { from, to, amount: amount.to_field() }.emit(\n            encode_and_encrypt_event_unconstrained(&mut context, to, from),\n        );\n    }\n    // docs:end:transfer\n\n    #[contract_library_method]\n    fn subtract_balance(\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n        account: AztecAddress,\n        amount: U128,\n        max_notes: u32,\n    ) -> U128 {\n        let subtracted = storage.balances.at(account).try_sub(amount, max_notes);\n        // Failing to subtract any amount means that the owner was unable to produce more notes that could be nullified.\n        // We could in some cases fail early inside try_sub if we detected that fewer notes than the maximum were\n        // returned and we were still unable to reach the target amount, but that'd make the code more complicated, and\n        // optimizing for the failure scenario is not as important.\n        assert(subtracted > U128::from_integer(0), \"Balance too low\");\n        if subtracted >= amount {\n            // We have achieved our goal of nullifying notes that add up to more than amount, so we return the change\n            subtracted - amount\n        } else {\n            // try_sub failed to nullify enough notes to reach the target amount, so we compute the amount remaining\n            // and try again.\n            let remaining = amount - subtracted;\n            compute_recurse_subtract_balance_call(*context, account, remaining).call(context)\n        }\n    }\n\n    // TODO(#7729): apply no_predicates to the contract interface method directly instead of having to use a wrapper\n    // like we do here.\n    #[no_predicates]\n    #[contract_library_method]\n    fn compute_recurse_subtract_balance_call(\n        context: PrivateContext,\n        account: AztecAddress,\n        remaining: U128,\n    ) -> PrivateCallInterface<25, U128> {\n        Token::at(context.this_address())._recurse_subtract_balance(account, remaining.to_field())\n    }\n\n    // TODO(#7728): even though the amount should be a U128, we can't have that type in a contract interface due to\n    // serialization issues.\n    #[internal]\n    #[private]\n    fn _recurse_subtract_balance(account: AztecAddress, amount: Field) -> U128 {\n        subtract_balance(\n            &mut context,\n            storage,\n            account,\n            U128::from_integer(amount),\n            RECURSIVE_TRANSFER_CALL_MAX_NOTES,\n        )\n    }\n\n    /**\n     * Cancel a private authentication witness.\n     * @param inner_hash The inner hash of the authwit to cancel.\n     */\n    // docs:start:cancel_authwit\n    #[private]\n    fn cancel_authwit(inner_hash: Field) {\n        let on_behalf_of = context.msg_sender();\n        let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n        context.push_nullifier(nullifier);\n    }\n    // docs:end:cancel_authwit\n\n    // docs:start:transfer_in_private\n    #[private]\n    fn transfer_in_private(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        // docs:start:assert_current_call_valid_authwit\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        // docs:end:assert_current_call_valid_authwit\n\n        let amount = U128::from_integer(amount);\n        // docs:start:increase_private_balance\n        // docs:start:encrypted\n        // TODO: constrain encryption below - we are using unconstrained here only becuase of the following Noir issue\n        // https://github.com/noir-lang/noir/issues/5771\n        storage.balances.at(from).sub(from, amount).emit(encode_and_encrypt_note_unconstrained(\n            &mut context,\n            from,\n            from,\n        ));\n        // docs:end:encrypted\n        // docs:end:increase_private_balance\n        // TODO: constrain encryption below - we are using unconstrained here only becuase of the following Noir issue\n        // https://github.com/noir-lang/noir/issues/5771\n        storage.balances.at(to).add(to, amount).emit(encode_and_encrypt_note_unconstrained(\n            &mut context,\n            to,\n            from,\n        ));\n    }\n    // docs:end:transfer_in_private\n\n    // docs:start:burn_private\n    #[private]\n    fn burn_private(from: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        // TODO: constrain encryption below - we are using unconstrained here only becuase of the following Noir issue\n        // https://github.com/noir-lang/noir/issues/5771\n        storage.balances.at(from).sub(from, U128::from_integer(amount)).emit(\n            encode_and_encrypt_note_unconstrained(&mut context, from, from),\n        );\n        Token::at(context.this_address())._reduce_total_supply(amount).enqueue(&mut context);\n    }\n    // docs:end:burn_private\n\n    // docs:start:transfer_to_private\n    // Transfers token `amount` from public balance of message sender to a private balance of `to`.\n    #[private]\n    fn transfer_to_private(to: AztecAddress, amount: Field) {\n        // `from` is the owner of the public balance from which we'll subtract the `amount`.\n        let from = context.msg_sender();\n        let token = Token::at(context.this_address());\n\n        // We prepare the private balance increase (the partial note).\n        let hiding_point_slot = _prepare_private_balance_increase(from, to, &mut context, storage);\n\n        // At last we finalize the transfer. Usage of the `unsafe` method here is safe because we set the `from`\n        // function argument to a message sender, guaranteeing that he can transfer only his own tokens.\n        token._finalize_transfer_to_private_unsafe(from, amount, hiding_point_slot).enqueue(\n            &mut context,\n        );\n    }\n    // docs:end:transfer_to_private\n\n    // docs:start:prepare_private_balance_increase\n    /// Prepares an increase of private balance of `to` (partial note). The increase needs to be finalized by calling\n    /// some of the finalization functions (`finalize_transfer_to_private`, `finalize_mint_to_private`).\n    /// Returns a hiding point slot.\n    #[private]\n    fn prepare_private_balance_increase(to: AztecAddress, from: AztecAddress) -> Field {\n        // TODO(#9887): ideally we'd not have `from` here, but we do need a `from` address to produce a tagging secret\n        // with `to`.\n        _prepare_private_balance_increase(from, to, &mut context, storage)\n    }\n    // docs:end:prepare_private_balance_increase\n\n    /// This function exists separately from `prepare_private_balance_increase` solely as an optimization as it allows\n    /// us to have it inlined in the `transfer_to_private` function which results in one less kernel iteration.\n    ///\n    /// TODO(#9180): Consider adding macro support for functions callable both as an entrypoint and as an internal\n    /// function.\n    #[contract_library_method]\n    fn _prepare_private_balance_increase(\n        from: AztecAddress, // sender of the tag: TODO(#9887): this is not great?\n        to: AztecAddress,\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n    ) -> Field {\n        let to_note_slot = storage.balances.at(to).set.storage_slot;\n\n        // We create a setup payload with unpopulated/zero `amount` for 'to'\n        // TODO(#7775): Manually fetching the randomness here is not great. If we decide to include randomness in all\n        // notes we could just inject it in macros.\n        let note_randomness = unsafe { random() };\n        let note_setup_payload = UintNote::setup_payload().new(to, note_randomness, to_note_slot);\n\n        // We get the keys and encrypt the log of the note\n        let setup_log = note_setup_payload.encrypt_log(context, to, from);\n\n        // Using the x-coordinate as a hiding point slot is safe against someone else interfering with it because\n        // we have a guarantee that the public functions of the transaction are executed right after the private ones\n        // and for this reason the protocol guarantees that nobody can front-run us in consuming the hiding point.\n        // This guarantee would break if `finalize_transfer_to_private` was not called in the same transaction. This\n        // however is not the flow we are currently concerned with. To support the multi-transaction flow we could\n        // introduce a `from` function argument, hash the x-coordinate with it and then repeat the hashing in\n        // `finalize_transfer_to_private`.\n        //\n        // We can also be sure that the `hiding_point_slot` will not overwrite any other value in the storage because\n        // in our state variables we derive slots using a different hash function from multi scalar multiplication\n        // (MSM).\n        let hiding_point_slot = note_setup_payload.hiding_point.x;\n\n        // We don't need to perform a check that the value overwritten by `_store_point_in_transient_storage_unsafe`\n        // is zero because the slot is the x-coordinate of the hiding point and hence we could only overwrite\n        // the value in the slot with the same value. This makes usage of the `unsafe` method safe.\n        Token::at(context.this_address())\n            ._store_payload_in_transient_storage_unsafe(\n                hiding_point_slot,\n                note_setup_payload.hiding_point,\n                setup_log,\n            )\n            .enqueue(context);\n\n        hiding_point_slot\n    }\n\n    // docs:start:finalize_transfer_to_private\n    /// Finalizes a transfer of token `amount` from public balance of `from` to a private balance of `to`.\n    /// The transfer must be prepared by calling `prepare_private_balance_increase` first and the resulting\n    /// `hiding_point_slot` must be passed as an argument to this function.\n    #[public]\n    fn finalize_transfer_to_private(amount: Field, hiding_point_slot: Field) {\n        let from = context.msg_sender();\n        _finalize_transfer_to_private(from, amount, hiding_point_slot, &mut context, storage);\n    }\n    // docs:end:finalize_transfer_to_private\n\n    // docs:start:finalize_transfer_to_private_unsafe\n    /// This is a wrapper around `_finalize_transfer_to_private` placed here so that a call\n    /// to `_finalize_transfer_to_private` can be enqueued. Called unsafe as it does not check `from` (this has to be\n    /// done in the calling function).\n    #[public]\n    #[internal]\n    fn _finalize_transfer_to_private_unsafe(\n        from: AztecAddress,\n        amount: Field,\n        hiding_point_slot: Field,\n    ) {\n        _finalize_transfer_to_private(from, amount, hiding_point_slot, &mut context, storage);\n    }\n    // docs:end:finalize_transfer_to_private_unsafe\n\n    #[contract_library_method]\n    fn _finalize_transfer_to_private(\n        from: AztecAddress,\n        amount: Field,\n        hiding_point_slot: Field,\n        context: &mut PublicContext,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        // TODO(#8271): Type the amount as U128 and nuke the ugly cast\n        let amount = U128::from_integer(amount);\n\n        // First we subtract the `amount` from the public balance of `from`\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n\n        // Then we finalize the partial note with the `amount`\n        let finalization_payload =\n            UintNote::finalization_payload().new(context, hiding_point_slot, amount);\n\n        // At last we emit the note hash and the final log\n        finalization_payload.emit();\n    }\n\n    // docs:start:mint_to_private\n    /// Mints token `amount` to a private balance of `to`. Message sender has to have minter permissions (checked\n    /// in the enqueued call).\n    #[private]\n    fn mint_to_private(\n        from: AztecAddress, // sender of the tag: TODO(#9887): this is not great?\n        to: AztecAddress,\n        amount: Field,\n    ) {\n        let token = Token::at(context.this_address());\n\n        // We prepare the partial note to which we'll \"send\" the minted amount.\n        let hiding_point_slot = _prepare_private_balance_increase(from, to, &mut context, storage);\n\n        // At last we finalize the mint. Usage of the `unsafe` method here is safe because we set the `from`\n        // function argument to a message sender, guaranteeing that only a message sender with minter permissions\n        // can successfully execute the function.\n        token\n            ._finalize_mint_to_private_unsafe(context.msg_sender(), amount, hiding_point_slot)\n            .enqueue(&mut context);\n    }\n    // docs:end:mint_to_private\n\n    // docs:start:finalize_mint_to_private\n    /// Finalizes a mint of token `amount` to a private balance of `to`. The mint must be prepared by calling\n    /// `prepare_private_balance_increase` first and the resulting\n    /// `hiding_point_slot` must be passed as an argument to this function.\n    ///\n    /// Note: This function is only an optimization as it could be replaced by a combination of `mint_to_public`\n    /// and `finalize_transfer_to_private`. It is however used very commonly so it makes sense to optimize it\n    /// (e.g. used during token bridging, in AMM liquidity token etc.).\n    #[public]\n    fn finalize_mint_to_private(amount: Field, hiding_point_slot: Field) {\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not minter\");\n\n        _finalize_mint_to_private(amount, hiding_point_slot, &mut context, storage);\n    }\n    // docs:end:finalize_mint_to_private\n\n    // docs:start:finalize_mint_to_private_unsafe\n    #[public]\n    #[internal]\n    fn _finalize_mint_to_private_unsafe(\n        from: AztecAddress,\n        amount: Field,\n        hiding_point_slot: Field,\n    ) {\n        // We check the minter permissions as it was not done in `mint_to_private` function.\n        assert(storage.minters.at(from).read(), \"caller is not minter\");\n        _finalize_mint_to_private(amount, hiding_point_slot, &mut context, storage);\n    }\n    // docs:end:finalize_mint_to_private_unsafe\n\n    #[contract_library_method]\n    fn _finalize_mint_to_private(\n        amount: Field,\n        hiding_point_slot: Field,\n        context: &mut PublicContext,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        let amount = U128::from_integer(amount);\n\n        // First we increase the total supply by the `amount`\n        let supply = storage.total_supply.read().add(amount);\n        storage.total_supply.write(supply);\n\n        // Then we finalize the partial note with the `amount`\n        let finalization_payload =\n            UintNote::finalization_payload().new(context, hiding_point_slot, amount);\n\n        // At last we emit the note hash and the final log\n        finalization_payload.emit();\n    }\n\n    // docs:start:setup_refund\n    /// Called by fee payer contract (FPC) to set up a refund for a user during the private fee payment flow.\n    #[private]\n    fn setup_refund(\n        user: AztecAddress, // A user for which we are setting up the fee refund.\n        max_fee: Field, // The maximum fee a user is willing to pay for the tx.\n        nonce: Field, // A nonce to make authwitness unique.\n    ) {\n        // 1. This function is called by FPC when setting up a refund so we need to support the authwit flow here\n        // and check that the user really permitted fee_recipient to set up a refund on their behalf.\n        assert_current_call_valid_authwit(&mut context, user);\n\n        // 2. Deduct the max fee from user's balance. The difference between max fee and the actual tx fee will\n        // be refunded to the user in the `complete_refund(...)` function.\n        let change = subtract_balance(\n            &mut context,\n            storage,\n            user,\n            U128::from_integer(max_fee),\n            INITIAL_TRANSFER_CALL_MAX_NOTES,\n        );\n        // Emit the change note.\n        storage.balances.at(user).add(user, change).emit(encode_and_encrypt_note_unconstrained(\n            &mut context,\n            user,\n            user,\n        ));\n\n        // 3. Prepare the partial note for the refund.\n        let user_point_slot = _prepare_private_balance_increase(user, user, &mut context, storage);\n\n        // 4. Set the public teardown function to `complete_refund(...)`. Public teardown is the only time when a public\n        // function has access to the final transaction fee, which is needed to compute the actual refund amount.\n        let fee_recipient = context.msg_sender(); // FPC is the fee recipient.\n        context.set_public_teardown_function(\n            context.this_address(),\n            comptime { FunctionSelector::from_signature(\"complete_refund((Field),Field,Field)\") },\n            [fee_recipient.to_field(), user_point_slot, max_fee],\n        );\n    }\n    // docs:end:setup_refund\n\n    // TODO(#9375): Having to define the note log length here is very unfortunate as it's basically impossible for\n    // users to derive manually. This will however go away once we have a real transient storage since we will not need\n    // the public call and instead we would do something like `context.transient_storage_write(slot, payload)` and that\n    // will allow us to use generics and hence user will not need to define it explicitly. We cannot use generics here\n    // as it is an entrypoint function.\n    #[public]\n    #[internal]\n    fn _store_payload_in_transient_storage_unsafe(\n        slot: Field,\n        point: Point,\n        setup_log: [Field; 9],\n    ) {\n        context.storage_write(slot, point);\n        context.storage_write(slot + aztec::protocol_types::point::POINT_LENGTH as Field, setup_log);\n    }\n\n    // TODO(#7728): even though the max_fee should be a U128, we can't have that type in a contract interface due\n    // to serialization issues.\n    // docs:start:complete_refund\n    /// Executed as a public teardown function and is responsible for completing the refund in a private fee payment\n    /// flow.\n    #[public]\n    #[internal]\n    fn complete_refund(fee_recipient: AztecAddress, user_slot: Field, max_fee: Field) {\n        // TODO(#7728): Remove the next line\n        let max_fee = U128::from_integer(max_fee);\n        let tx_fee = U128::from_integer(context.transaction_fee());\n\n        // 1. We check that user funded the fee payer contract with at least the transaction fee.\n        // TODO(#7796): we should try to prevent reverts here\n        assert(max_fee >= tx_fee, \"max fee not enough to cover tx fee\");\n\n        // 2. We compute the refund amount as the difference between funded amount and the tx fee.\n        // TODO(#10805): Introduce a real exchange rate\n        let refund_amount = max_fee - tx_fee;\n\n        // 3. We send the tx fee to the fee recipient in public.\n        _increase_public_balance_inner(fee_recipient, tx_fee.to_field(), storage);\n\n        // 4. We construct the user note finalization payload with the refund amount.\n        let user_finalization_payload =\n            UintNote::finalization_payload().new(&mut context, user_slot, refund_amount);\n\n        // 5. At last we emit the user finalization note hash and the corresponding note log.\n        user_finalization_payload.emit();\n        // --> Once the tx is settled user and fee recipient can add the notes to their pixies.\n    }\n    // docs:end:complete_refund\n\n    /// Internal ///\n    // docs:start:increase_public_balance\n    /// TODO(#9180): Consider adding macro support for functions callable both as an entrypoint and as an internal\n    /// function.\n    #[public]\n    #[internal]\n    fn _increase_public_balance(to: AztecAddress, amount: Field) {\n        _increase_public_balance_inner(to, amount, storage);\n    }\n    // docs:end:increase_public_balance\n\n    #[contract_library_method]\n    fn _increase_public_balance_inner(\n        to: AztecAddress,\n        amount: Field,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        let new_balance = storage.public_balances.at(to).read().add(U128::from_integer(amount));\n        storage.public_balances.at(to).write(new_balance);\n    }\n\n    // docs:start:reduce_total_supply\n    #[public]\n    #[internal]\n    fn _reduce_total_supply(amount: Field) {\n        // Only to be called from burn.\n        let new_supply = storage.total_supply.read().sub(U128::from_integer(amount));\n        storage.total_supply.write(new_supply);\n    }\n    // docs:end:reduce_total_supply\n\n    /// Unconstrained ///\n    // docs:start:balance_of_private\n    pub(crate) unconstrained fn balance_of_private(owner: AztecAddress) -> pub Field {\n        storage.balances.at(owner).balance_of().to_field()\n    }\n    // docs:end:balance_of_private\n}\n\n// docs:end:token_all\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-contracts/contracts/token_contract/src/main.nr"},"351":{"source":"use dep::aztec::{\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::partial_note,\n    note::utils::compute_note_hash_for_nullify,\n    oracle::random::random,\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{\n        address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator,\n    },\n};\n\n// docs:start:UintNote\n#[partial_note(quote {value})]\npub struct UintNote {\n    // The amount of tokens in the note\n    value: U128,\n    owner: AztecAddress,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:UintNote\n\nimpl NullifiableNote for UintNote {\n    // docs:start:nullifier\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m_hash = get_public_keys(self.owner).npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let owner_npk_m_hash = get_public_keys(self.owner).npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl Eq for UintNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.owner == other.owner)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: U128, owner: AztecAddress) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness, header: NoteHeader::empty() }\n    }\n\n    pub fn get_value(self) -> U128 {\n        self.value\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/uint-note/src/uint_note.nr"},"356":{"source":"use dep::aztec::{\n    context::PrivateContext,\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::note,\n    note::{\n        note_header::NoteHeader, note_interface::NullifiableNote,\n        utils::compute_note_hash_for_nullify,\n    },\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator, traits::Serialize,\n    },\n};\n\nglobal VALUE_NOTE_LEN: u32 = 3; // 3 plus a header.\n\n// docs:start:value-note-def\n// ValueNote is used as fn parameter in the Claim contract, so it has to implement the Serialize trait.\n// It is important that the order of these annotations is preserved so that derive(Serialize) runs AFTER the note macro, which injects the note header.\n#[note]\n#[derive(Serialize)]\npub struct ValueNote {\n    value: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NullifiableNote for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m_hash: Field = get_public_keys(self.owner).npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let owner_npk_m_hash: Field = get_public_keys(self.owner).npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: AztecAddress) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        let header = NoteHeader::empty();\n        ValueNote { value, owner, randomness, header }\n    }\n}\n\nimpl Eq for ValueNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.owner == other.owner)\n            & (self.randomness == other.randomness)\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/value-note/src/value_note.nr"}}}