{"noir_version":"1.0.0-beta.1+74f0a50ed44e5712","name":"RockPaperScissors","functions":[{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":12,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"11091894166229312484":{"error_kind":"fmtstring","length":20,"item_types":[]},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"token_addr","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7VVTUvEMBCdfqGxeln14EXBX5Cmldbbgj9A0IPnsWnFg6wsi+f96bYwodkhuwvbZKAMaaZv3nuZthFMEVFO2RocNUvKcl4UHrHkDslDIvaJeqQsKMfWfuJRtGB9feI3sqqEQ59H/qUgzJD+GMwA+PKMcF62Ez7XMsYVre0ZMs+cD1dO9wSrC3GeAf2W1w7+pteo847pjC0/5nIoP5+xRakuB4wbwsK/n9ffdqW7981qjV/dW4faPgM+G8D2wKGD1xktqUctJky/jPAyB+eU7ZnaBeXR9wfGNfHMVQ++jr7fEhb3/WP9vemARbzHYGAkY3BHiCGiUN7FRI46l5jIv5hythj+KqSOOjtymH596XZ6ztenpm6kNJwSws9gd6yB9c9Y/T2tLyxdtr7liTz7Gou+xB6fUOuqxQXDt33LA/QveolKq1q3jWpqVMf6/wOxoR6SuAkAAA==","debug_symbols":"5ZbbaoQwEIbfJddeTDIxk+yrlLJ4iIsgKh4KRXz3mrKm7lYqy2JZ8EaMfObPR04zsNTG/eWcl1nVstPbwIoqibq8KqfWMAYsbvKiyC/n5WcG7sHFN9/WUemabRc1HTtxGYqA2TJ1r1pOPWR5YdlJ4Rj8hpXiM6y08vD05wpNgqsrTQLJ07TWNQHQDINUf8McNOE8EDBwg78HjONxVOXzqiTkDBOaG1WXEO6eoHZPoN0T9FoCSTVPHoVcbk210X48HARu4A+N3oCHjdBby/ln8ZPSeL/kzGFUBby4qiKvavA5VX4cVfHvqiHM9wMPUWyoSvBXjxS0UDWPq+JBVMep9RE1eRQX9loKZX2ZLCqj7rO2d0VS3VSJTfvGunJpUSm5XS/CAMGddm5fIA8Qp4wp5ws=","brillig_names":["constructor"]},{"name":"start_game","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"game_id","type":{"kind":"field"},"visibility":"private"},{"name":"player1_move","type":{"kind":"field"},"visibility":"private"},{"name":"bet_amount","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"3478708872465429459":{"error_kind":"string","string":"Invalid move!"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7764445047318889914":{"error_kind":"string","string":"Public data tree index doesn't match witness"},"9199403315589104763":{"error_kind":"string","string":"Proving public value inclusion failed"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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","brillig_names":["get_public_data_witness","field_less_than","decompose_hint","lte_hint","pack_arguments_oracle_wrapper","call_private_function_internal","notify_created_note_oracle_wrapper","debug_log_oracle_wrapper","pack_arguments_oracle_wrapper","enqueue_public_function_call_internal","directive_integer_quotient","directive_invert","directive_to_radix"]},{"name":"_increment_games_length","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[],"return_type":null,"error_types":{"12202234319566413571":{"error_kind":"string","string":"Function _increment_games_length can only be called internally"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7VU3UrDMBRO/9BuguLfjYKvkJJtnXcVH0BwF14fl1S80Ek3vN6jrxkna3Zou7I1H4ScktPv56TUYxU83EPWAK/tsKZX4wn3GHffOg/KleEzPw1JTHT75J/ykYhr8vXof8vvOfKvYfgdzZ+fIc/ruuK3sxjd83INrG/CVWZzZy4z3xzIeY/1RbkusYb/n7e/+UKqmfqVqjCv1o2sDZryilK+SFmo5ZJy+h05TU+AdcSa40Wk13jRsR+xpterkeHOT4PQ+W9p/tlqUcCXelcgu86g6/xjkrfHLInRC1s8G12d+64h90fxvVLE946EBqSiPqvHkFX/7nC9byjrYQDplHPjKUD+iO0PmhH9iPQ/4PPAymXny470maeQ5AJyGIOUozlcE357bkMH+vA8TvlnOgEhJ0nOxSH9DY12hyLNBwAA","debug_symbols":"5VTRioNADPyXffYhye4ma3/lKMW22yKIFmsPjuK/3+7hiudJpb3HvoiRmWQykbmro9/fzruyPjVXtfm4q6o5FF3Z1KG695nat2VVlefd9LOC+ED8wV8vRR3La1e0ndog55ApXx/DqwCEDqey8mrDus/+gI21egAbyziCZQnsCGgAO0KZgreZQvq/Gu1cUqNzWVGD2iY1aHGuRj+pJnLMCxz7AoeXOGQ5nYKsc4+dwuB/GkCGRjCafAEthDyghfSKr0Fvai1g+DEYwUlSjZADz88g77OqW1yVKY0gtm7+J+TPcwiWOQAjh3jFUgOYNjEka5YyJ7Sw0yuWmvG0YtGsWZq7lCiIQL96b/tQfRZtWewrP2Th6VYfJtHYfV38LCUvbXPwx1vrY15OojKaRpSRRNdjbpLLNIQZYc43","brillig_names":["_increment_games_length"]},{"name":"play_game","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"game_id","type":{"kind":"field"},"visibility":"private"},{"name":"player2_move","type":{"kind":"field"},"visibility":"private"},{"name":"bet_match","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"1705275289401561847":{"error_kind":"string","string":"Mismatch note header storage slot."},"2701317986746916850":{"error_kind":"string","string":"Game already completed"},"4688170593035196046":{"error_kind":"string","string":"No game found for this ID"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5357398033083954139":{"error_kind":"string","string":"Can only remove a note that has been read from the set."},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6869395374906889440":{"error_kind":"string","string":"Mismatch note header contract address."},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"7764445047318889914":{"error_kind":"string","string":"Public data tree index doesn't match witness"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"9199403315589104763":{"error_kind":"string","string":"Proving public value inclusion failed"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"11857897258154266340":{"error_kind":"string","string":"Bet mismatch!"},"11873158822563704285":{"error_kind":"string","string":"Mismatch return note field."},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17595253152434889169":{"error_kind":"string","string":"offset too large"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"","brillig_names":["get_notes_internal","get_collapse_hints","field_less_than","decompose_hint","lte_hint","get_public_data_witness","pack_arguments_oracle_wrapper","call_private_function_internal","get_public_keys_and_partial_address","get_key_validation_request","notify_nullified_note_oracle_wrapper","notify_created_note_oracle_wrapper","debug_log_oracle_wrapper","directive_integer_quotient","directive_to_radix","directive_invert"]},{"name":"sync_notes","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VUyw6CMBBseURBOaiJ3kz8gyIYOJJ49x8akKMe8OKNT5eabbqpVRKlJkzSbEs3szNlW0oUKESPvAH9tGnIFdhBDCA6aN/tRgFr9hviQKs7JH/O0iQw+BtQ/5OfWtIvIPktnT+bAM+xVfzYi6w77UaIesKWZ/nPbHpe9fhc/MFnh32k1caghm+uIYci3RuYR4Y8iRlRd9prh/eV5YzJei7w++RVO67va/lrWIeafvmOFV/qrDMe1wmv+YFXVVrypcYv4KBzGnMvbGHe1wvY45yo3mjul/J0vZ0b0gNB8gCVxsvQjgYAAA==","debug_symbols":"ndLBCoQgFAXQf3nrFmll2a/EEFYWgmiYDQzRv49GMzRDG908vOJ5bu4GA+/WqRVq1AvUzQZS98wKrVza9gQ6I6QUU3u9htQPhI73y8yUj4tlxkKNMEqAq8GfqPOjkBxqku2PBBAOFlmwyINFESrw7R80R/QkNM/J16CMHKiIQSQGlTGoikDZbQVokVYfVODyF+0uPpkRrJP8rNi4qv7SOPua+V/5ZqN7PqyG+xpeGuhmg8oEY7fWrX4D","brillig_names":["sync_notes"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"12202234319566413571":{"error_kind":"string","string":"Function _increment_games_length can only be called internally"},"16541607464495309456":{"error_kind":"fmtstring","length":16,"item_types":[]},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+1azW7TQBBex3YSJ01JC1x5Bv80iXML6oEDB6RWgvM2dhBSaas0IHHLg8AFJJ6BExI3kHgosmjHmUzHbiLvlh4YKVrbO/7m+8b753UcsTZHlx45F4zPRJdhPYsMYoUbJKtElIn6rctAlw1U7xoUHZC4JvHT8OgoYPQZ5J8EGtNmfgDTAn7Y0jjHyzU+1aKsp89xG4J72qtfV18LiJ+N52kx3+FDhj/EUjo/EZ0NlI+6HJJBMk6yWYJ1KfMrOAEPz1I+AL9pBz8BXT7Ko8togvg9Ju9OSQlYtA5idYTdvlulDfOH4z7xpzkow/J3xAqYOhvP1KvQjePfVRvGeoVBfF9s9tcnulRt9hnRaGkcj6BfQD/BOiF2y07seNt+B/E7wuqYUvS7FuFD8wNtcW/1e6yP5fu3L66ml1l+LM/PM7mQx5dXH7AImkha4iTgOjpguSXnZX4OErGLOPBvM/5YB3S+B0xcuLeqkW3TCDCvvrjZCHwLcWjjVzbRZVjTOA0tixraxjXEGaehTeI2DcZNzsZyKsNYdbpHGqvodKeLy7l8nZ/kMnNI3troWJA6fNws8YNr8ELgM7gtUge+qS6V7xexmRvTzyRbaWcHJJ2bV/M3i1wQa5QkQRCSDcGbjQetLTYuhhspOTGueTFJbTF02G8xfti44ZgO7RjTZa7RIZd7v6uaVri1KvDihj7aNWysN8p04ykN4u9pvsqKh3aSL97NLwQx+rg8dJ2mq1lyj4v8sVUtB4WB9KTDfJrl6ZTy414f6asl+D5HXF8SrvT+SU2+2obcTInzSc1lfMBPPfKv+rjH+NF7mgT3tubOPf+7WF474uZqoaz7GWzuXJPZpblXNSHHWIqG7C6cOfxRwr29GeQ/43ZZzOEPBlwTNZifmBvxDeZnCviBFfy42CHo2OF/BvhdO/kvdkX37PAv2k/PDv8R4O/b4Z/DFAPDIsQQYj029dF1c8N3FDkknhD87gjE7xCuhqeTYnekT/jQ/MBYCrk7YLj2mTo6hh0wcQ6YOBzWvkGszj3l5RrE6t1TjYFBrIZBrD2DWO17yssxiNU1iGWy3dM3T6xZ2USXYT0rxk7ggr9Y+ESPEOvXK/D/SHja+RoQxf/ua0C089eAHsMHeHeYOq8G13yQzsbpYLxa0kfDeBw6BB+40mvbbKZzcye3bjWY6xDGe3e5xseb9co8VNcidT6qA47q/u+Ev52dnGir/OP4fcG3Bzje5Vkeis22hvtjF+XDW5rXPkrDEPoCPDtf3NzawPF94v9Zn+N1jRD1+8hsJKNZImdyILPsaCoPCT7OYddC/GgWyjiLR9k0jdORjG+Lj/+Vwf1LxSkp/+ayApvbUxDC2FxSfDzCvBp3oOO/hg2TVRrYrbTT/CLL51QWJ4kzBdmnkE+zbJ5fX1PMxpaY4LPNH4bonxW+6VJ1o1/6mC6jlE10GdazZNfvfmU52Db/Fr8GRRDPq+AMcWt/OaKCPcYPWxfd01qurwMhF12DdQCsC9rYn9QFqM5brvko6+hzD8XBWMDDJ/4/9Tn0tSa6B+7vM/GbJP4Gb+YabUwB4x8w/mqN8EMf25jz5HgwCs9GQ5lkw9X8l9w25/0BTQNUnassAAA=","debug_symbols":"7VvbbuJADP2XPPNgey6e6a+sVhVtaYWEoKJ0pVXFv2/SkpBCCjoTuYt2eaka5GN7fEtke96qh9nd69PtfPm4eqlufrxVi9X9dDNfLeunt+2kulvPF4v5023/54qaPyzv9C/P02Xz+LKZrjfVDQtPqtnyofkv1/jH+WJW3US3/Tmp2MEIDyMCjIgwQmFEghEZRQjBCIYRsM8F9rnAPhfY5w6z1eSYlCi7lpjY+Y5cPwSwtQCxFuCsBXhrAcFaQLQWoCMFJM470tRj7niINjLtaKOLn2gbTdLFaJIvRRM/uojE3LJnJTqoUZ5t2Yste2fL3tuyD7bsoy17tWWfbNlnU/bBNmvDYNaqcNxhVJz2y/yxgJqptsTk42lipqT7V0imc+TAOX2QltYnf84osWMc016JGvluFblaZcAqo2skpIyK7+LW5SNl/CUpEy5JmcFqrT62EaaB/bl4zKnTh0ncX4rHTB1xlvTpoAMZt49ejckdfJsGvVplwCrp37FK1M4q2Y2zSr5a5dgqkb7dKp46s3jRnvYZ036cwQO1r30OTg4+oCJfrTJgFbjxFuHGW/QwYnyHpWd78hIPUyRaC1BrAclaQDYWoHCXWOFgVbiDq3DXXuGuvcJde4W79omM3ZfYWoBYC3DWAry1ADhYExysCQ7WBAdrhkdMGS4eGS4eGX7TZfhNl+EClWGfZ9jnGfZ5hn1ezyhwCOMQfJpM+DiZPA7BB8qET5QJHykTPlMm3PuMe59x7xfsEhQsExRsExSsExTsExQsFBRsFOArBYzvFDC+VMD4VgHjawWM7xUwvljAgntfcO8L7n3Bve9w7zvc+65gjwj3vsO9P3p/QNsmhO6bCkE+eEdD3mrIOxnyzna8R8/qT/FmQ95iyNsZ8vaGvA3z0hvmpTfMS2+Yl94wL4NhXgbDvAyGeRkM8zIY5mUwzMsv+rQnVzH4i97rGVAuACmVgLgEJCUgVwLyJaBQAooloJKI0JKIUDQijiPbh9COr3yIvO21BwcWFKWbRyfhT2sxjTqJxqvjUmrVcfnM4k2qP4RbdeqaeqROSRSnkihOJVE83Nu9mM0jCd1cU0JKp91Wl9Ju+Cx+PyJsBpXvZw3/0VkHa4ZEaVESQzoKBi0Bff9Kh91AWiJRd9benKI567Z++jVdz6d3i9nu9s/j6/K+dxlo8/t5dnAv6Hm9up89vK5nzQ2h/eWgJlW5TkwhamzYlCwOOuEozWNTMri2H8dQS60l/wE=","brillig_names":["public_dispatch"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"RockPaperScissors::play_game_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"RockPaperScissors::play_game_parameters","fields":[{"name":"game_id","type":{"kind":"field"}},{"name":"player2_move","type":{"kind":"field"}},{"name":"bet_match","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"RockPaperScissors::start_game_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"RockPaperScissors::start_game_parameters","fields":[{"name":"game_id","type":{"kind":"field"}},{"name":"player1_move","type":{"kind":"field"}},{"name":"bet_amount","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"RockPaperScissors::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"RockPaperScissors::constructor_parameters","fields":[{"name":"token_addr","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"RockPaperScissors::_increment_games_length_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"RockPaperScissors::_increment_games_length_parameters","fields":[]}}]}]},"globals":{"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000c0c5aaf"},{"kind":"string","value":"UintNote"},{"kind":"struct","fields":[{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000c0c5aaf"},{"kind":"string","value":"UintNote"},{"kind":"struct","fields":[{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000ef2f4971"},{"kind":"string","value":"GameNote"},{"kind":"struct","fields":[{"name":"id","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"player1_move","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"player1_address","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"bet_amount","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"is_completed","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003de78269"},{"kind":"string","value":"ValueNote"},{"kind":"struct","fields":[{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]}],"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"Token"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"admin","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"minters","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"total_supply","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"public_balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"symbol","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"name","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}]}},{"name":"decimals","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}]}}]}}]},{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"RockPaperScissors"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"games","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"token_address","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"games_length","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}}]}}]}]}},"file_map":{"7":{"source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n        for i in 0..MaxLen {\n            if i >= len {\n                array[i] = zeroed;\n            }\n        }\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"17":{"source":"use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n","path":"std/embedded_curve_ops.nr"},"18":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        /*@safety: borrow is enforced to be boolean due to its type.\n            if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n            if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n        */\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            /*@safety: decomposition is properly checked below*/\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            unsafe {\n                //@safety: already unconstrained\n                field_less_than(b, a)\n            },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            //@safety: unsafe in unconstrained\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        unsafe {\n            //@safety: Take a hint of the comparison and verify it\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"19":{"source":"pub mod bn254;\nuse crate::runtime::is_unconstrained;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            //@safety : unconstrained context\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"21":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        //@safety : xlo and xhi decomposition is checked below\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"26":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"51":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"52":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"62":{"source":"use dep::aztec::{\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::note,\n    note::utils::compute_note_hash_for_nullify,\n    protocol_types::{\n        address::AztecAddress,\n        constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator,\n        traits::Serialize\n    },\n};\nuse dep::aztec::prelude::{NoteHeader, NullifiableNote, PrivateContext};\n\nglobal GAME_NOTE_LEN: u32 = 5;\n\n#[note]\npub struct GameNote {\n    id: Field,             // Unique game ID\n    player1_move: Field,   // 0=Rock, 1=Paper, 2=Scissors\n    player1_address: AztecAddress,\n    bet_amount: Field,\n    is_completed: bool,\n}\n\nimpl GameNote {\n    pub fn new(id: Field, player1_move: Field, player1_address: AztecAddress, bet_amount: Field) -> Self {\n        GameNote {\n            id,\n            player1_move,\n            player1_address,\n            bet_amount,\n            is_completed: false,\n            header: NoteHeader::empty()\n        }\n    }\n}\n\nimpl NullifiableNote for GameNote {\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m_hash: Field = get_public_keys(self.player1_address).npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let owner_npk_m_hash: Field = get_public_keys(self.player1_address).npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl Serialize<5> for GameNote {\n    fn serialize(self) -> [Field; 5] {\n        [\n            self.id,\n            self.bet_amount,\n            self.player1_move,\n            self.player1_address.to_field(),\n            self.is_completed as Field\n        ]\n    }\n}\n\nimpl Eq for GameNote {\n    fn eq(self, other: Self) -> bool {\n        self.id == other.id\n    }\n} ","path":"/home/john-play/Documents/joaolago1113/ZKRPS/aztec_wallet/src/contracts/src/game_note.nr"},"63":{"source":"mod game_note;\n\nuse dep::aztec::macros::aztec;\n\n/// An Aztec v3 Rock-Paper-Scissors contract with betting functionality.\n#[aztec]\ncontract RockPaperScissors {\n\n    use dep::aztec::{\n        note::{note_getter_options::NoteGetterOptions},\n        protocol_types::public_keys::OvpkM,\n        keys::getters::get_public_keys,\n        prelude::{PublicImmutable, AztecAddress, PrivateMutable, Map, PrivateSet, PrivateImmutable, PublicMutable, NoteHeader, Point},\n        encrypted_logs::encrypted_note_emission::encode_and_encrypt_note,\n        macros::{storage::storage, storage::storage_no_init, functions::{private, public, initializer, internal}}\n    };\n    use dep::aztec::{note::note_getter_options::SortOrder, utils::comparison::Comparator};\n    use dep::token::Token;\n    use crate::game_note::GameNote;\n    use dep::value_note::value_note::ValueNote;\n\n    /// The contract's main storage structure.\n    #[storage]\n    struct Storage<Context> {\n        /// Map of game ID to game notes\n        games: PrivateSet<GameNote, Context>,\n        /// The L2 token used for bets\n        token_address: PublicImmutable<AztecAddress, Context>,\n\n        games_length: PublicMutable<Field, Context>,\n    }\n\n\n    // ---------------------------------------------------------------------\n    // 1. Contract Constructor\n    // ---------------------------------------------------------------------\n    #[public]\n    fn constructor(token_addr: AztecAddress) {\n        storage.token_address.initialize(token_addr);\n        storage.games_length.write(Field::from(0));\n    }\n\n    #[private]\n    fn start_game(\n        game_id: Field,\n        player1_move: Field,\n        bet_amount: Field,\n        nonce: Field\n    ) {\n        assert(player1_move as u8 <= 2, \"Invalid move!\");\n\n        // Get token address from storage and verify it exists\n        let token_address = storage.token_address.read();\n\n        // Try to transfer tokens first\n        Token::at(token_address)\n            .transfer_in_private(context.msg_sender(), context.this_address(), bet_amount, nonce)\n            .call(&mut context);\n\n        // Create and insert game note\n        let mut game_note = GameNote::new(\n            game_id,\n            player1_move, \n            context.msg_sender(), \n            bet_amount\n        );\n\n        storage.games.insert(&mut game_note);\n\n        RockPaperScissors::at(context.this_address())\n            ._increment_games_length()\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _increment_games_length() {\n        let current_length = storage.games_length.read();\n        storage.games_length.write(current_length + Field::from(1));\n    }\n\n    #[private]\n    fn play_game(\n        game_id: Field,\n        player2_move: Field,\n        bet_match: Field\n    ) {\n        // 1. Retrieve the GameNote from the private set by game_id.\n        //    We'll do it by filtering on game_id property.\n        let mut options = NoteGetterOptions::new();\n        options = options\n            .select(GameNote::properties().id, Comparator.EQ, game_id)\n            .set_limit(1);\n\n        let notes = storage.games.get_notes(options);\n\n        assert(notes.len() > 0, \"No game found for this ID\");\n        let mut game_note = notes.get_unchecked(0);\n\n        // 2. Basic checks\n        assert(!game_note.is_completed, \"Game already completed\");\n        assert(bet_match == game_note.bet_amount, \"Bet mismatch!\");\n\n        let token_addr = storage.token_address.read();\n\n        Token::at(token_addr)\n            .transfer_in_private(context.msg_sender(), context.this_address(), bet_match, Field::from(0))\n            .call(&mut context);\n        // 4. Compare moves\n        let p1 = game_note.player1_move;\n        let p2 = player2_move;\n\n        // Decide winner. 0=Rock,1=Paper,2=Scissors\n        let mut winner: AztecAddress = AztecAddress::zero(); // We'll store the winner's address here\n        let mut is_draw = false;\n\n        if p1 == p2 {\n            // It's a draw\n            is_draw = true;\n        } else {\n            // RPS logic: if (p1 + 1) mod 3 == p2 => p2 wins\n            // We'll do a simple check:\n            let p1_plus_one = ((p1 + Field::from(1)) as u32 % 3).to_field();\n            if p1_plus_one == p2 {\n                // Player2 wins\n                winner = context.msg_sender(); // Because msg_sender is Player2\n            } else {\n                // Player1 wins\n                winner = game_note.player1_address;\n            }\n        }\n\n        // 5. Payout logic\n        // The pot is game_note.bet_amount (from Player1) + bet_match (from Player2)\n        let pot = game_note.bet_amount + bet_match;\n        if is_draw {\n            // For a draw, each player gets their bet back.\n            // So we send Player1's bet back to Player1\n            Token::at(token_addr)\n                .transfer_in_private(context.this_address(), game_note.player1_address, game_note.bet_amount, Field::from(0))\n                .call(&mut context);\n\n            // And we send Player2's bet back to Player2\n            Token::at(token_addr)\n                .transfer_in_private(context.this_address(), context.msg_sender(), bet_match, Field::from(0))\n                .call(&mut context);\n        } else {\n            // Send entire pot to the winner\n            Token::at(token_addr)\n                .transfer_in_private(context.this_address(), winner, pot, Field::from(0))\n                .call(&mut context);\n        }\n\n        // 6. Mark the game as completed\n        storage.games.remove(game_note);\n        game_note.is_completed = true;\n        storage.games.insert(&mut game_note);\n\n    }\n\n\n}\n\n","path":"/home/john-play/Documents/joaolago1113/ZKRPS/aztec_wallet/src/contracts/src/main.nr"},"64":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, traits::Deserialize,\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::hash_args;\nuse crate::oracle::arguments::pack_arguments;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\npub struct PrivateCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub gas_opts: GasOpts,\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n    pub gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n    pub gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr"},"71":{"source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct PackedReturns {\n    packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<let N: u32>(self) -> [Field; N] {\n        // We verify that the value returned by `unpack_returns` is the preimage of `packed_returns`, fully constraining\n        // it.\n        let unpacked: [Field; N] = unsafe { unpack_returns(self.packed_returns) };\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr"},"72":{"source":"use dep::protocol_types::debug_log::debug_log_format;\n\nuse crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    hash::{ArgsHasher, hash_args_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        arguments,\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n            set_public_teardown_function_call_internal,\n        },\n        key_validation_request::get_key_validation_request,\n        returns::pack_returns,\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS, PUBLIC_DISPATCH_SELECTOR,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::Empty,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n\n        // WARNING(https://github.com/AztecProtocol/aztec-packages/issues/10558): if you delete this debug_log_format line, some tests fail.\n        debug_log_format(\n            \"Context.note_hashes, after pushing new note hash: {0}\",\n            self.note_hashes.storage().map(|nh: NoteHash| nh.value),\n        );\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: self.next_counter(),\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert(request.pk_m.hash() == pk_m_hash);\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index],\n                },\n            );\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // The oracle simulates the private call and returns the value of the side effects counter after execution of\n        // the call (which means that end_side_effect_counter - start_side_effect_counter is the number of side effects\n        // that took place), along with the hash of the return values. We validate these by requesting a private kernel\n        // iteration in which the return values are constrained to hash to `returns_hash` and the side effects counter\n        // to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"73":{"source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Deserialize, Empty, Serialize};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe { emit_unencrypted_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call_static(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // AVM opcodes are constrained by the AVM itself.\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Deserialize<N>,\n    {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Serialize<N>,\n    {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_opcode(gas, address, args)\n}\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"83":{"source":"use dep::protocol_types::point::Point;\n\n// A set of generators generated with `derive_generators(...)` function from noir::std\npub global Ga1: Point = Point {\n    x: 0x30426e64aee30e998c13c8ceecda3a77807dbead52bc2f3bf0eae851b4b710c1,\n    y: 0x113156a068f603023240c96b4da5474667db3b8711c521c748212a15bc034ea6,\n    is_infinite: false,\n};\npub global Ga2: Point = Point {\n    x: 0x2825c79cc6a5cbbeef7d6a8f1b6a12b312aa338440aefeb4396148c89147c049,\n    y: 0x129bfd1da54b7062d6b544e7e36b90736350f6fba01228c41c72099509f5701e,\n    is_infinite: false,\n};\npub global Ga3: Point = Point {\n    x: 0x0edb1e293c3ce91bfc04e3ceaa50d2c541fa9d091c72eb403efb1cfa2cb3357f,\n    y: 0x1341d675fa030ece3113ad53ca34fd13b19b6e9762046734f414824c4d6ade35,\n    is_infinite: false,\n};\npub global Ga4: Point = Point {\n    x: 0x0e0dad2250583f2a9f0acb04ededf1701b85b0393cae753fe7e14b88af81cb52,\n    y: 0x0973b02c5caac339ee4ad5dab51329920f7bf1b6a07e1dabe5df67040b300962,\n    is_infinite: false,\n};\npub global Ga5: Point = Point {\n    x: 0x2f3342e900e8c488a28931aae68970738fdc68afde2910de7b320c00c902087d,\n    y: 0x1bf958dc63cb09d59230603a0269ae86d6f92494da244910351f1132df20fc08,\n    is_infinite: false,\n};\n// If you change this update `G_SLOT` in `yarn-project/simulator/src/client/test_utils.ts` as well\npub global G_slot: Point = Point {\n    x: 0x041223147b680850dc82e8a55a952d4df20256fe0593d949a9541ca00f0abf15,\n    y: 0x0a8c72e60d0e60f5d804549d48f3044d06140b98ed717a9b532af630c1530791,\n    is_infinite: false,\n};\n\nmod test {\n    use crate::generators::{G_slot, Ga1, Ga2, Ga3, Ga4, Ga5};\n    use dep::protocol_types::point::Point;\n    use std::hash::derive_generators;\n\n    #[test]\n    unconstrained fn test_generators() {\n        let generators: [Point; 6] = derive_generators(\"aztec_nr_generators\".as_bytes(), 0);\n        assert_eq(generators[0], Ga1);\n        assert_eq(generators[1], Ga2);\n        assert_eq(generators[2], Ga3);\n        assert_eq(generators[4], Ga4);\n        assert_eq(generators[5], Ga5);\n        assert_eq(generators[3], G_slot);\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/generators.nr"},"84":{"source":"use crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\nuse dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::Hash,\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(\n    contract_address: AztecAddress,\n    log: [u8; N],\n) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd,\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = AztecAddress::from_field(\n        0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303,\n    );\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/hash.nr"},"91":{"source":"use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n                == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path)\n                ,\n                \"Proving public value inclusion failed\",\n            );\n\n            // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n            // we have two scenarios:\n            // 1. The tree entry is initialized, and the value is the same as the one in the witness\n            // 2. The entry was never initialized, and the value is default zero (the default)\n            // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n            let preimage = witness.leaf_preimage;\n\n            let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n            let is_next_greater_than =\n                full_field_less_than(public_data_tree_index, preimage.next_slot);\n            let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n            let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n            let value = if is_in_range {\n                0\n            } else {\n                assert_eq(\n                    preimage.slot,\n                    public_data_tree_index,\n                    \"Public data tree index doesn't match witness\",\n                );\n                preimage.value\n            };\n\n            value\n        }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/history/public_storage.nr"},"94":{"source":"use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"109":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_header::NoteHeader,\n    note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_nullify_internal, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(context: &mut PrivateContext, note: Note)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    notify_nullified_note(nullifier, notification_note_hash, nullifier_counter);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"113":{"source":"use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteInterface, NullifiableNote},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\nuse dep::protocol_types::constants::{\n    GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(context: PrivateContext, storage_slot: Field, note: Note)\nwhere\n    Note: NoteInterface<N>,\n{\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (Note, Field)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note = unsafe { get_note_internal(storage_slot) };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::array::collapse(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> =\n        BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note\nwhere\n    Note: NoteInterface<N>,\n{\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length,\n    )[0]\n        .expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteInterface<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteInterface<N>,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr"},"120":{"source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote}},\n    utils::array,\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier as compute_siloed_nullifier_from_preimage,\n    compute_unique_note_hash,\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash = note.compute_note_hash();\n    let header = note.get_header();\n    let nonce = header.nonce;\n    let counter = header.note_hash_counter;\n\n    // If same tx note, read request always uses the normal note hash\n    if counter != 0 {\n        note_hash\n    } else {\n        // If the note comes from a different tx, we need to compute the note hash that reached the tree\n        compute_unique_note_hash(\n            nonce,\n            compute_siloed_note_hash(header.contract_address, note_hash),\n        )\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note.get_header();\n\n    if (header.note_hash_counter != 0) & (header.nonce != 0) {\n        // Non-revertible note, nullified by a revertible nullifier, we need to nullify the note hash that will reach the tree\n        let siloed_note_hash =\n            compute_siloed_note_hash(header.contract_address, note_hash_for_read_request);\n\n        compute_unique_note_hash(header.nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub unconstrained fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S],\n) -> [Field; 4]\nwhere\n    T: NoteInterface<N> + NullifiableNote,\n{\n    let mut note = deserialize_content(array::subarray(serialized_note, 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, note_hash);\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"121":{"source":"/// Notifies the simulator that `args` will later be used at some point during execution, referenced by their hash. This\n/// allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of arguments.\npub fn pack_arguments(args: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_arguments_oracle_wrapper(args) };\n}\n\n/// Same as `pack_arguments`, but using arrays instead of slices.\npub fn pack_arguments_array<let N: u32>(args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_arguments_array_oracle_wrapper(args) };\n}\n\nunconstrained fn pack_arguments_oracle_wrapper(args: [Field]) {\n    let _ = pack_arguments_oracle(args);\n}\n\nunconstrained fn pack_arguments_array_oracle_wrapper<let N: u32>(args: [Field; N]) {\n    let _ = pack_arguments_array_oracle(args);\n}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr"},"123":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr"},"124":{"source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"130":{"source":"use crate::utils::array;\nuse dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage {\n            slot: fields[1],\n            value: fields[2],\n            next_index: fields[3] as u32,\n            next_slot: fields[4],\n        },\n        path: array::subarray(fields, 1 + LEAF_PREIMAGE_LENGTH),\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr"},"132":{"source":"use dep::protocol_types::abis::validation_requests::{\n    key_validation_request::KEY_VALIDATION_REQUEST_LENGTH, KeyValidationRequest,\n};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"133":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"136":{"source":"use crate::{note::{note_header::NoteHeader, note_interface::NoteInterface}, utils::array};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::{INDEXED_TAGGING_SECRET_LENGTH, IndexedTaggingSecret},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            serialized_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        serialized_note,\n        note_hash,\n        counter,\n    );\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(\n    _nullifier: Field,\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S],\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S]\nwhere\n    Note: NoteInterface<N>,\n{\n    sync_notes_oracle_wrapper();\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let note_content = array::subarray(fields, read_offset + 2);\n\n            let mut note = Note::deserialize_content(note_content);\n            note.set_header(NoteHeader { contract_address, nonce, storage_slot, note_hash_counter });\n\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n/// Same as `get_indexed_tagging_secret_as_sender`, except it returns the derived tag, ready to be included in a log.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender(sender, recipient).compute_tag(recipient)\n}\n\n/// Returns the tagging secret for a given sender and recipient pair, siloed for the current contract address.\n/// Includes the last known index used to send a note tagged with this secret.\n/// For this to work, PXE must know the ivsk_m of the sender.\n/// For the recipient's side, only the address is needed.\npub unconstrained fn get_indexed_tagging_secret_as_sender(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> IndexedTaggingSecret {\n    let result = get_indexed_tagging_secret_as_sender_oracle(sender, recipient);\n    IndexedTaggingSecret::deserialize(result)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> [Field; INDEXED_TAGGING_SECRET_LENGTH] {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n\n/// Finds new notes that may have been sent to all registered accounts in PXE in the current contract and makes them available\n/// for later querying via the `get_notes` oracle.\npub fn sync_notes() {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        sync_notes_oracle_wrapper();\n    }\n}\n\nunconstrained fn sync_notes_oracle_wrapper() {\n    sync_notes_oracle();\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle() {}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"146":{"source":"use crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest,\n    constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::{Deserialize, Serialize},\n};\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    pub context: Context,\n    pub storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context, let N: u32> Storage<T, N> for PrivateSet<T, Context>\nwhere\n    T: Serialize<N> + Deserialize<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // TODO: This function is still around because of a stale blacklist token. It should most likely be nuked. If you\n    // need this functionality use partial notes instead.\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr"},"148":{"source":"use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext},\n    state_vars::storage::Storage,\n};\nuse dep::protocol_types::{\n    constants::INITIALIZATION_SLOT_SEPARATOR,\n    traits::{Deserialize, Serialize},\n};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\nimpl<T, Context, let N: u32> Storage<T, N> for PublicImmutable<T, Context>\nwhere\n    T: Serialize<N> + Deserialize<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicImmutable<T, &mut PublicContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    // docs:start:public_immutable_struct_write\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicImmutable<T, UnconstrainedContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicImmutable<T, &mut PrivateContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    pub fn read(self) -> T {\n        let header = self.context.get_block_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] = header.public_storage_historical_read(\n                self.storage_slot + i as Field,\n                (*self.context).this_address(),\n            );\n        }\n        T::deserialize(fields)\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr"},"149":{"source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<T, N> for PublicMutable<T, Context>\nwhere\n    T: Serialize<N> + Deserialize<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, &mut PublicContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, UnconstrainedContext>\nwhere\n    T: Deserialize<T_SERIALIZED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"167":{"source":"/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collpased BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr"},"169":{"source":"/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must be large enough to hold all of\n/// the elements past `offset`.\n///\n/// Example:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n/// ```\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr"},"171":{"source":"struct ComparatorEnum {\n    pub EQ: u8,\n    pub NEQ: u8,\n    pub LT: u8,\n    pub LTE: u8,\n    pub GT: u8,\n    pub GTE: u8,\n}\n\npub global Comparator: ComparatorEnum =\n    ComparatorEnum { EQ: 1, NEQ: 2, LT: 3, LTE: 4, GT: 5, GTE: 6 };\n\npub fn compare(lhs: Field, operation: u8, rhs: Field) -> bool {\n    // Values are computed ahead of time because circuits evaluate all branches\n    let is_equal = lhs == rhs;\n    let is_lt = lhs.lt(rhs);\n\n    if (operation == Comparator.EQ) {\n        is_equal\n    } else if (operation == Comparator.NEQ) {\n        !is_equal\n    } else if (operation == Comparator.LT) {\n        is_lt\n    } else if (operation == Comparator.LTE) {\n        is_lt | is_equal\n    } else if (operation == Comparator.GT) {\n        !is_lt & !is_equal\n    } else if (operation == Comparator.GTE) {\n        !is_lt\n    } else {\n        panic(f\"Invalid operation\")\n    }\n}\n\nmod test {\n    use super::Comparator;\n    use super::compare;\n\n    #[test]\n    unconstrained fn test_compare() {\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.LT, rhs), \"Expected lhs to be less than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.LTE, rhs), \"Expected lhs to be less than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GT, rhs), \"Expected lhs to be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to not be not equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LT, rhs), \"Expected lhs to not be less than rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            !compare(lhs, Comparator.LTE, rhs),\n            \"Expected lhs to not be less than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.GT, rhs), \"Expected lhs to not be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/utils/comparison.nr"},"225":{"source":"use crate::{point::Point, traits::{Deserialize, Empty, Serialize}};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pub pk_m: Point,\n    pub sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [self.pk_m.x, self.pk_m.y, self.pk_m.is_infinite as Field, self.sk_app]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool },\n            sk_app: fields[3],\n        }\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr"},"232":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        MAX_FIELD_VALUE,\n    },\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n    traits::{Deserialize, Empty, FromField, Serialize, ToField},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse ec::{pow, sqrt};\nuse std::embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secrect can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        function_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            function_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"247":{"source":"use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr"},"248":{"source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr"},"249":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedLogHash},\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::scoped::Scoped,\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::utils::{arrays::array_concat, field::field_from_bytes};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [tx_hash, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    tx_hash: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\npub fn compute_tx_logs_hash<let N: u32>(logs: [LogHash; N]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; N * 32];\n    for offset in 0..N {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> std::hash::poseidon2::Poseidon2 {\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: std::hash::poseidon2::Poseidon2,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> std::hash::poseidon2::Poseidon2 {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: std::hash::poseidon2::Poseidon2,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> std::hash::poseidon2::Poseidon2 {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let two_pow_64 = 18446744073709551616;\n    let empty_sponge = std::hash::poseidon2::Poseidon2::new((in_len as Field) * two_pow_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut contructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(contructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == contructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"259":{"source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr"},"265":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"274":{"source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr"},"310":{"source":"pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nfn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = unsafe { find_index_hint(values, |v: Field| min.lt(v)) };\n    assert_eq(index, 2);\n}\n\n#[test]\nfn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = unsafe { find_index_hint(values, |v: Field| min.lt(v)) };\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concated = array_concat(array0, array1);\n    assert_eq(concated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr"},"311":{"source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"313":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"322":{"source":"// docs:start:token_all\n// docs:start:imports\nmod types;\nmod test;\n\nuse dep::aztec::macros::aztec;\n\n// Minimal token implementation that supports `AuthWit` accounts.\n// The auth message follows a similar pattern to the cross-chain message and includes a designated caller.\n// The designated caller is ALWAYS used here, and not based on a flag as cross-chain.\n// message hash = H([caller, contract, selector, ...args])\n// To be read as `caller` calls function at `contract` defined by `selector` with `args`\n// Including a nonce in the message hash ensures that the message can only be used once.\n#[aztec]\ncontract Token {\n    // Libs\n    use std::meta::derive;\n\n    use dep::compressed_string::FieldCompressedString;\n\n    use dep::aztec::{\n        context::{PrivateCallInterface, PrivateContext},\n        encrypted_logs::{\n            encrypted_event_emission::encode_and_encrypt_event_unconstrained,\n            encrypted_note_emission::encode_and_encrypt_note_unconstrained,\n        },\n        macros::{\n            events::event,\n            functions::{initializer, internal, private, public, view},\n            storage::storage,\n        },\n        oracle::random::random,\n        prelude::{\n            AztecAddress, FunctionSelector, Map, PublicContext, PublicImmutable, PublicMutable,\n        },\n        protocol_types::{point::Point, traits::Serialize},\n    };\n\n    use dep::uint_note::uint_note::UintNote;\n\n    // docs:start:import_authwit\n    use dep::authwit::auth::{\n        assert_current_call_valid_authwit, assert_current_call_valid_authwit_public,\n        compute_authwit_nullifier,\n    };\n    // docs:end:import_authwit\n\n    use crate::types::balance_set::BalanceSet;\n\n    // docs:end::imports\n\n    // In the first transfer iteration we are computing a lot of additional information (validating inputs, retrieving\n    // keys, etc.), so the gate count is already relatively high. We therefore only read a few notes to keep the happy\n    // case with few constraints.\n    global INITIAL_TRANSFER_CALL_MAX_NOTES: u32 = 2;\n    // All the recursive call does is nullify notes, meaning the gate count is low, but it is all constant overhead. We\n    // therefore read more notes than in the base case to increase the efficiency of the overhead, since this results in\n    // an overall small circuit regardless.\n    global RECURSIVE_TRANSFER_CALL_MAX_NOTES: u32 = 8;\n\n    #[derive(Serialize)]\n    #[event]\n    struct Transfer {\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n    }\n\n    // docs:start:storage_struct\n    #[storage]\n    struct Storage<Context> {\n        // docs:start:storage_admin\n        admin: PublicMutable<AztecAddress, Context>,\n        // docs:end:storage_admin\n        // docs:start:storage_minters\n        minters: Map<AztecAddress, PublicMutable<bool, Context>, Context>,\n        // docs:end:storage_minters\n        // docs:start:storage_balances\n        balances: Map<AztecAddress, BalanceSet<Context>, Context>,\n        // docs:end:storage_balances\n        total_supply: PublicMutable<U128, Context>,\n        public_balances: Map<AztecAddress, PublicMutable<U128, Context>, Context>,\n        symbol: PublicImmutable<FieldCompressedString, Context>,\n        name: PublicImmutable<FieldCompressedString, Context>,\n        // docs:start:storage_decimals\n        decimals: PublicImmutable<u8, Context>,\n        // docs:end:storage_decimals\n    }\n    // docs:end:storage_struct\n\n    // docs:start:constructor\n    #[public]\n    #[initializer]\n    fn constructor(admin: AztecAddress, name: str<31>, symbol: str<31>, decimals: u8) {\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.admin.write(admin);\n        storage.minters.at(admin).write(true);\n        storage.name.initialize(FieldCompressedString::from_string(name));\n        storage.symbol.initialize(FieldCompressedString::from_string(symbol));\n        // docs:start:initialize_decimals\n        storage.decimals.initialize(decimals);\n        // docs:end:initialize_decimals\n    }\n    // docs:end:constructor\n\n    // docs:start:set_admin\n    #[public]\n    fn set_admin(new_admin: AztecAddress) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        // docs:start:write_admin\n        storage.admin.write(new_admin);\n        // docs:end:write_admin\n    }\n    // docs:end:set_admin\n\n    #[public]\n    #[view]\n    fn public_get_name() -> FieldCompressedString {\n        storage.name.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_name() -> FieldCompressedString {\n        storage.name.read()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_decimals() -> pub u8 {\n        storage.decimals.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_decimals() -> pub u8 {\n        storage.decimals.read()\n    }\n\n    // docs:start:admin\n    #[public]\n    #[view]\n    fn get_admin() -> Field {\n        storage.admin.read().to_field()\n    }\n    // docs:end:admin\n\n    // docs:start:is_minter\n    #[public]\n    #[view]\n    fn is_minter(minter: AztecAddress) -> bool {\n        storage.minters.at(minter).read()\n    }\n    // docs:end:is_minter\n\n    // docs:start:total_supply\n    #[public]\n    #[view]\n    fn total_supply() -> Field {\n        storage.total_supply.read().to_integer()\n    }\n    // docs:end:total_supply\n\n    // docs:start:balance_of_public\n    #[public]\n    #[view]\n    fn balance_of_public(owner: AztecAddress) -> Field {\n        storage.public_balances.at(owner).read().to_integer()\n    }\n    // docs:end:balance_of_public\n\n    // docs:start:set_minter\n    #[public]\n    fn set_minter(minter: AztecAddress, approve: bool) {\n        // docs:start:read_admin\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        // docs:end:read_admin\n        // docs:start:write_minter\n        storage.minters.at(minter).write(approve);\n        // docs:end:write_minter\n    }\n    // docs:end:set_minter\n\n    // docs:start:mint_to_public\n    #[public]\n    fn mint_to_public(to: AztecAddress, amount: Field) {\n        // docs:start:read_minter\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not minter\");\n        // docs:end:read_minter\n        let amount = U128::from_integer(amount);\n        let new_balance = storage.public_balances.at(to).read().add(amount);\n        let supply = storage.total_supply.read().add(amount);\n        storage.public_balances.at(to).write(new_balance);\n        storage.total_supply.write(supply);\n    }\n    // docs:end:mint_to_public\n\n    // docs:start:transfer_in_public\n    #[public]\n    fn transfer_in_public(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        let amount = U128::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n        let to_balance = storage.public_balances.at(to).read().add(amount);\n        storage.public_balances.at(to).write(to_balance);\n    }\n    // docs:end:transfer_in_public\n\n    // docs:start:burn_public\n    #[public]\n    fn burn_public(from: AztecAddress, amount: Field, nonce: Field) {\n        // docs:start:assert_current_call_valid_authwit_public\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        // docs:end:assert_current_call_valid_authwit_public\n        let amount = U128::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n        let new_supply = storage.total_supply.read().sub(amount);\n        storage.total_supply.write(new_supply);\n    }\n    // docs:end:burn_public\n\n    // docs:start:transfer_to_public\n    #[private]\n    fn transfer_to_public(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        // TODO: constrain encryption below - we are using unconstrained here only because of the following Noir issue\n        // https://github.com/noir-lang/noir/issues/5771\n        storage.balances.at(from).sub(from, U128::from_integer(amount)).emit(\n            encode_and_encrypt_note_unconstrained(&mut context, from, from),\n        );\n        Token::at(context.this_address())._increase_public_balance(to, amount).enqueue(&mut context);\n    }\n    // docs:end:transfer_to_public\n\n    // docs:start:transfer\n    #[private]\n    fn transfer(to: AztecAddress, amount: Field) {\n        let from = context.msg_sender();\n\n        let amount = U128::from_integer(amount);\n        // We reduce `from`'s balance by amount by recursively removing notes over potentially multiple calls. This\n        // method keeps the gate count for each individual call low - reading too many notes at once could result in\n        // circuits in which proving is not feasible.\n        // Since the sum of the amounts in the notes we nullified was potentially larger than amount, we create a new\n        // note for `from` with the change amount, e.g. if `amount` is 10 and two notes are nullified with amounts 8 and\n        // 5, then the change will be 3 (since 8 + 5 - 10 = 3).\n        let change = subtract_balance(\n            &mut context,\n            storage,\n            from,\n            amount,\n            INITIAL_TRANSFER_CALL_MAX_NOTES,\n        );\n        storage.balances.at(from).add(from, change).emit(encode_and_encrypt_note_unconstrained(\n            &mut context,\n            from,\n            from,\n        ));\n        storage.balances.at(to).add(to, amount).emit(encode_and_encrypt_note_unconstrained(\n            &mut context,\n            to,\n            from,\n        ));\n        // We don't constrain encryption of the note log in `transfer` (unlike in `transfer_in_private`) because the transfer\n        // function is only designed to be used in situations where the event is not strictly necessary (e.g. payment to\n        // another person where the payment is considered to be successful when the other party successfully decrypts a\n        // note).\n        Transfer { from, to, amount: amount.to_field() }.emit(\n            encode_and_encrypt_event_unconstrained(&mut context, to, from),\n        );\n    }\n    // docs:end:transfer\n\n    #[contract_library_method]\n    fn subtract_balance(\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n        account: AztecAddress,\n        amount: U128,\n        max_notes: u32,\n    ) -> U128 {\n        let subtracted = storage.balances.at(account).try_sub(amount, max_notes);\n        // Failing to subtract any amount means that the owner was unable to produce more notes that could be nullified.\n        // We could in some cases fail early inside try_sub if we detected that fewer notes than the maximum were\n        // returned and we were still unable to reach the target amount, but that'd make the code more complicated, and\n        // optimizing for the failure scenario is not as important.\n        assert(subtracted > U128::from_integer(0), \"Balance too low\");\n        if subtracted >= amount {\n            // We have achieved our goal of nullifying notes that add up to more than amount, so we return the change\n            subtracted - amount\n        } else {\n            // try_sub failed to nullify enough notes to reach the target amount, so we compute the amount remaining\n            // and try again.\n            let remaining = amount - subtracted;\n            compute_recurse_subtract_balance_call(*context, account, remaining).call(context)\n        }\n    }\n\n    // TODO(#7729): apply no_predicates to the contract interface method directly instead of having to use a wrapper\n    // like we do here.\n    #[no_predicates]\n    #[contract_library_method]\n    fn compute_recurse_subtract_balance_call(\n        context: PrivateContext,\n        account: AztecAddress,\n        remaining: U128,\n    ) -> PrivateCallInterface<25, U128> {\n        Token::at(context.this_address())._recurse_subtract_balance(account, remaining.to_field())\n    }\n\n    // TODO(#7728): even though the amount should be a U128, we can't have that type in a contract interface due to\n    // serialization issues.\n    #[internal]\n    #[private]\n    fn _recurse_subtract_balance(account: AztecAddress, amount: Field) -> U128 {\n        subtract_balance(\n            &mut context,\n            storage,\n            account,\n            U128::from_integer(amount),\n            RECURSIVE_TRANSFER_CALL_MAX_NOTES,\n        )\n    }\n\n    /**\n     * Cancel a private authentication witness.\n     * @param inner_hash The inner hash of the authwit to cancel.\n     */\n    // docs:start:cancel_authwit\n    #[private]\n    fn cancel_authwit(inner_hash: Field) {\n        let on_behalf_of = context.msg_sender();\n        let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n        context.push_nullifier(nullifier);\n    }\n    // docs:end:cancel_authwit\n\n    // docs:start:transfer_in_private\n    #[private]\n    fn transfer_in_private(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        // docs:start:assert_current_call_valid_authwit\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        // docs:end:assert_current_call_valid_authwit\n\n        let amount = U128::from_integer(amount);\n        // docs:start:increase_private_balance\n        // docs:start:encrypted\n        // TODO: constrain encryption below - we are using unconstrained here only becuase of the following Noir issue\n        // https://github.com/noir-lang/noir/issues/5771\n        storage.balances.at(from).sub(from, amount).emit(encode_and_encrypt_note_unconstrained(\n            &mut context,\n            from,\n            from,\n        ));\n        // docs:end:encrypted\n        // docs:end:increase_private_balance\n        // TODO: constrain encryption below - we are using unconstrained here only becuase of the following Noir issue\n        // https://github.com/noir-lang/noir/issues/5771\n        storage.balances.at(to).add(to, amount).emit(encode_and_encrypt_note_unconstrained(\n            &mut context,\n            to,\n            from,\n        ));\n    }\n    // docs:end:transfer_in_private\n\n    // docs:start:burn_private\n    #[private]\n    fn burn_private(from: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        // TODO: constrain encryption below - we are using unconstrained here only becuase of the following Noir issue\n        // https://github.com/noir-lang/noir/issues/5771\n        storage.balances.at(from).sub(from, U128::from_integer(amount)).emit(\n            encode_and_encrypt_note_unconstrained(&mut context, from, from),\n        );\n        Token::at(context.this_address())._reduce_total_supply(amount).enqueue(&mut context);\n    }\n    // docs:end:burn_private\n\n    // docs:start:transfer_to_private\n    // Transfers token `amount` from public balance of message sender to a private balance of `to`.\n    #[private]\n    fn transfer_to_private(to: AztecAddress, amount: Field) {\n        // `from` is the owner of the public balance from which we'll subtract the `amount`.\n        let from = context.msg_sender();\n        let token = Token::at(context.this_address());\n\n        // We prepare the private balance increase (the partial note).\n        let hiding_point_slot = _prepare_private_balance_increase(from, to, &mut context, storage);\n\n        // At last we finalize the transfer. Usage of the `unsafe` method here is safe because we set the `from`\n        // function argument to a message sender, guaranteeing that he can transfer only his own tokens.\n        token._finalize_transfer_to_private_unsafe(from, amount, hiding_point_slot).enqueue(\n            &mut context,\n        );\n    }\n    // docs:end:transfer_to_private\n\n    // docs:start:prepare_private_balance_increase\n    /// Prepares an increase of private balance of `to` (partial note). The increase needs to be finalized by calling\n    /// some of the finalization functions (`finalize_transfer_to_private`, `finalize_mint_to_private`).\n    /// Returns a hiding point slot.\n    #[private]\n    fn prepare_private_balance_increase(to: AztecAddress, from: AztecAddress) -> Field {\n        // TODO(#9887): ideally we'd not have `from` here, but we do need a `from` address to produce a tagging secret\n        // with `to`.\n        _prepare_private_balance_increase(from, to, &mut context, storage)\n    }\n    // docs:end:prepare_private_balance_increase\n\n    /// This function exists separately from `prepare_private_balance_increase` solely as an optimization as it allows\n    /// us to have it inlined in the `transfer_to_private` function which results in one less kernel iteration.\n    ///\n    /// TODO(#9180): Consider adding macro support for functions callable both as an entrypoint and as an internal\n    /// function.\n    #[contract_library_method]\n    fn _prepare_private_balance_increase(\n        from: AztecAddress, // sender of the tag: TODO(#9887): this is not great?\n        to: AztecAddress,\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n    ) -> Field {\n        let to_note_slot = storage.balances.at(to).set.storage_slot;\n\n        // We create a setup payload with unpopulated/zero `amount` for 'to'\n        // TODO(#7775): Manually fetching the randomness here is not great. If we decide to include randomness in all\n        // notes we could just inject it in macros.\n        let note_randomness = unsafe { random() };\n        let note_setup_payload = UintNote::setup_payload().new(to, note_randomness, to_note_slot);\n\n        // We get the keys and encrypt the log of the note\n        let setup_log = note_setup_payload.encrypt_log(context, to, from);\n\n        // Using the x-coordinate as a hiding point slot is safe against someone else interfering with it because\n        // we have a guarantee that the public functions of the transaction are executed right after the private ones\n        // and for this reason the protocol guarantees that nobody can front-run us in consuming the hiding point.\n        // This guarantee would break if `finalize_transfer_to_private` was not called in the same transaction. This\n        // however is not the flow we are currently concerned with. To support the multi-transaction flow we could\n        // introduce a `from` function argument, hash the x-coordinate with it and then repeat the hashing in\n        // `finalize_transfer_to_private`.\n        //\n        // We can also be sure that the `hiding_point_slot` will not overwrite any other value in the storage because\n        // in our state variables we derive slots using a different hash function from multi scalar multiplication\n        // (MSM).\n        let hiding_point_slot = note_setup_payload.hiding_point.x;\n\n        // We don't need to perform a check that the value overwritten by `_store_point_in_transient_storage_unsafe`\n        // is zero because the slot is the x-coordinate of the hiding point and hence we could only overwrite\n        // the value in the slot with the same value. This makes usage of the `unsafe` method safe.\n        Token::at(context.this_address())\n            ._store_payload_in_transient_storage_unsafe(\n                hiding_point_slot,\n                note_setup_payload.hiding_point,\n                setup_log,\n            )\n            .enqueue(context);\n\n        hiding_point_slot\n    }\n\n    // docs:start:finalize_transfer_to_private\n    /// Finalizes a transfer of token `amount` from public balance of `from` to a private balance of `to`.\n    /// The transfer must be prepared by calling `prepare_private_balance_increase` first and the resulting\n    /// `hiding_point_slot` must be passed as an argument to this function.\n    #[public]\n    fn finalize_transfer_to_private(amount: Field, hiding_point_slot: Field) {\n        let from = context.msg_sender();\n        _finalize_transfer_to_private(from, amount, hiding_point_slot, &mut context, storage);\n    }\n    // docs:end:finalize_transfer_to_private\n\n    // docs:start:finalize_transfer_to_private_unsafe\n    /// This is a wrapper around `_finalize_transfer_to_private` placed here so that a call\n    /// to `_finalize_transfer_to_private` can be enqueued. Called unsafe as it does not check `from` (this has to be\n    /// done in the calling function).\n    #[public]\n    #[internal]\n    fn _finalize_transfer_to_private_unsafe(\n        from: AztecAddress,\n        amount: Field,\n        hiding_point_slot: Field,\n    ) {\n        _finalize_transfer_to_private(from, amount, hiding_point_slot, &mut context, storage);\n    }\n    // docs:end:finalize_transfer_to_private_unsafe\n\n    #[contract_library_method]\n    fn _finalize_transfer_to_private(\n        from: AztecAddress,\n        amount: Field,\n        hiding_point_slot: Field,\n        context: &mut PublicContext,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        // TODO(#8271): Type the amount as U128 and nuke the ugly cast\n        let amount = U128::from_integer(amount);\n\n        // First we subtract the `amount` from the public balance of `from`\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n\n        // Then we finalize the partial note with the `amount`\n        let finalization_payload =\n            UintNote::finalization_payload().new(context, hiding_point_slot, amount);\n\n        // At last we emit the note hash and the final log\n        finalization_payload.emit();\n    }\n\n    // docs:start:mint_to_private\n    /// Mints token `amount` to a private balance of `to`. Message sender has to have minter permissions (checked\n    /// in the enqueued call).\n    #[private]\n    fn mint_to_private(\n        from: AztecAddress, // sender of the tag: TODO(#9887): this is not great?\n        to: AztecAddress,\n        amount: Field,\n    ) {\n        let token = Token::at(context.this_address());\n\n        // We prepare the partial note to which we'll \"send\" the minted amount.\n        let hiding_point_slot = _prepare_private_balance_increase(from, to, &mut context, storage);\n\n        // At last we finalize the mint. Usage of the `unsafe` method here is safe because we set the `from`\n        // function argument to a message sender, guaranteeing that only a message sender with minter permissions\n        // can successfully execute the function.\n        token\n            ._finalize_mint_to_private_unsafe(context.msg_sender(), amount, hiding_point_slot)\n            .enqueue(&mut context);\n    }\n    // docs:end:mint_to_private\n\n    // docs:start:finalize_mint_to_private\n    /// Finalizes a mint of token `amount` to a private balance of `to`. The mint must be prepared by calling\n    /// `prepare_private_balance_increase` first and the resulting\n    /// `hiding_point_slot` must be passed as an argument to this function.\n    ///\n    /// Note: This function is only an optimization as it could be replaced by a combination of `mint_to_public`\n    /// and `finalize_transfer_to_private`. It is however used very commonly so it makes sense to optimize it\n    /// (e.g. used during token bridging, in AMM liquidity token etc.).\n    #[public]\n    fn finalize_mint_to_private(amount: Field, hiding_point_slot: Field) {\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not minter\");\n\n        _finalize_mint_to_private(amount, hiding_point_slot, &mut context, storage);\n    }\n    // docs:end:finalize_mint_to_private\n\n    // docs:start:finalize_mint_to_private_unsafe\n    #[public]\n    #[internal]\n    fn _finalize_mint_to_private_unsafe(\n        from: AztecAddress,\n        amount: Field,\n        hiding_point_slot: Field,\n    ) {\n        // We check the minter permissions as it was not done in `mint_to_private` function.\n        assert(storage.minters.at(from).read(), \"caller is not minter\");\n        _finalize_mint_to_private(amount, hiding_point_slot, &mut context, storage);\n    }\n    // docs:end:finalize_mint_to_private_unsafe\n\n    #[contract_library_method]\n    fn _finalize_mint_to_private(\n        amount: Field,\n        hiding_point_slot: Field,\n        context: &mut PublicContext,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        let amount = U128::from_integer(amount);\n\n        // First we increase the total supply by the `amount`\n        let supply = storage.total_supply.read().add(amount);\n        storage.total_supply.write(supply);\n\n        // Then we finalize the partial note with the `amount`\n        let finalization_payload =\n            UintNote::finalization_payload().new(context, hiding_point_slot, amount);\n\n        // At last we emit the note hash and the final log\n        finalization_payload.emit();\n    }\n\n    // docs:start:setup_refund\n    /// Called by fee payer contract (FPC) to set up a refund for a user during the private fee payment flow.\n    #[private]\n    fn setup_refund(\n        user: AztecAddress, // A user for which we are setting up the fee refund.\n        max_fee: Field, // The maximum fee a user is willing to pay for the tx.\n        nonce: Field, // A nonce to make authwitness unique.\n    ) {\n        // 1. This function is called by FPC when setting up a refund so we need to support the authwit flow here\n        // and check that the user really permitted fee_recipient to set up a refund on their behalf.\n        assert_current_call_valid_authwit(&mut context, user);\n\n        // 2. Deduct the max fee from user's balance. The difference between max fee and the actual tx fee will\n        // be refunded to the user in the `complete_refund(...)` function.\n        let change = subtract_balance(\n            &mut context,\n            storage,\n            user,\n            U128::from_integer(max_fee),\n            INITIAL_TRANSFER_CALL_MAX_NOTES,\n        );\n        // Emit the change note.\n        storage.balances.at(user).add(user, change).emit(encode_and_encrypt_note_unconstrained(\n            &mut context,\n            user,\n            user,\n        ));\n\n        // 3. Prepare the partial note for the refund.\n        let user_point_slot = _prepare_private_balance_increase(user, user, &mut context, storage);\n\n        // 4. Set the public teardown function to `complete_refund(...)`. Public teardown is the only time when a public\n        // function has access to the final transaction fee, which is needed to compute the actual refund amount.\n        let fee_recipient = context.msg_sender(); // FPC is the fee recipient.\n        context.set_public_teardown_function(\n            context.this_address(),\n            comptime { FunctionSelector::from_signature(\"complete_refund((Field),Field,Field)\") },\n            [fee_recipient.to_field(), user_point_slot, max_fee],\n        );\n    }\n    // docs:end:setup_refund\n\n    // TODO(#9375): Having to define the note log length here is very unfortunate as it's basically impossible for\n    // users to derive manually. This will however go away once we have a real transient storage since we will not need\n    // the public call and instead we would do something like `context.transient_storage_write(slot, payload)` and that\n    // will allow us to use generics and hence user will not need to define it explicitly. We cannot use generics here\n    // as it is an entrypoint function.\n    #[public]\n    #[internal]\n    fn _store_payload_in_transient_storage_unsafe(\n        slot: Field,\n        point: Point,\n        setup_log: [Field; 9],\n    ) {\n        context.storage_write(slot, point);\n        context.storage_write(slot + aztec::protocol_types::point::POINT_LENGTH as Field, setup_log);\n    }\n\n    // TODO(#7728): even though the max_fee should be a U128, we can't have that type in a contract interface due\n    // to serialization issues.\n    // docs:start:complete_refund\n    /// Executed as a public teardown function and is responsible for completing the refund in a private fee payment\n    /// flow.\n    #[public]\n    #[internal]\n    fn complete_refund(fee_recipient: AztecAddress, user_slot: Field, max_fee: Field) {\n        // TODO(#7728): Remove the next line\n        let max_fee = U128::from_integer(max_fee);\n        let tx_fee = U128::from_integer(context.transaction_fee());\n\n        // 1. We check that user funded the fee payer contract with at least the transaction fee.\n        // TODO(#7796): we should try to prevent reverts here\n        assert(max_fee >= tx_fee, \"max fee not enough to cover tx fee\");\n\n        // 2. We compute the refund amount as the difference between funded amount and the tx fee.\n        // TODO(#10805): Introduce a real exchange rate\n        let refund_amount = max_fee - tx_fee;\n\n        // 3. We send the tx fee to the fee recipient in public.\n        _increase_public_balance_inner(fee_recipient, tx_fee.to_field(), storage);\n\n        // 4. We construct the user note finalization payload with the refund amount.\n        let user_finalization_payload =\n            UintNote::finalization_payload().new(&mut context, user_slot, refund_amount);\n\n        // 5. At last we emit the user finalization note hash and the corresponding note log.\n        user_finalization_payload.emit();\n        // --> Once the tx is settled user and fee recipient can add the notes to their pixies.\n    }\n    // docs:end:complete_refund\n\n    /// Internal ///\n    // docs:start:increase_public_balance\n    /// TODO(#9180): Consider adding macro support for functions callable both as an entrypoint and as an internal\n    /// function.\n    #[public]\n    #[internal]\n    fn _increase_public_balance(to: AztecAddress, amount: Field) {\n        _increase_public_balance_inner(to, amount, storage);\n    }\n    // docs:end:increase_public_balance\n\n    #[contract_library_method]\n    fn _increase_public_balance_inner(\n        to: AztecAddress,\n        amount: Field,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        let new_balance = storage.public_balances.at(to).read().add(U128::from_integer(amount));\n        storage.public_balances.at(to).write(new_balance);\n    }\n\n    // docs:start:reduce_total_supply\n    #[public]\n    #[internal]\n    fn _reduce_total_supply(amount: Field) {\n        // Only to be called from burn.\n        let new_supply = storage.total_supply.read().sub(U128::from_integer(amount));\n        storage.total_supply.write(new_supply);\n    }\n    // docs:end:reduce_total_supply\n\n    /// Unconstrained ///\n    // docs:start:balance_of_private\n    pub(crate) unconstrained fn balance_of_private(owner: AztecAddress) -> pub Field {\n        storage.balances.at(owner).balance_of().to_field()\n    }\n    // docs:end:balance_of_private\n}\n\n// docs:end:token_all\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-contracts/contracts/token_contract/src/main.nr"},"351":{"source":"use dep::aztec::{\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::partial_note,\n    note::utils::compute_note_hash_for_nullify,\n    oracle::random::random,\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{\n        address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator,\n    },\n};\n\n// docs:start:UintNote\n#[partial_note(quote {value})]\npub struct UintNote {\n    // The amount of tokens in the note\n    value: U128,\n    owner: AztecAddress,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:UintNote\n\nimpl NullifiableNote for UintNote {\n    // docs:start:nullifier\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m_hash = get_public_keys(self.owner).npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let owner_npk_m_hash = get_public_keys(self.owner).npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl Eq for UintNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.owner == other.owner)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: U128, owner: AztecAddress) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness, header: NoteHeader::empty() }\n    }\n\n    pub fn get_value(self) -> U128 {\n        self.value\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/uint-note/src/uint_note.nr"},"356":{"source":"use dep::aztec::{\n    context::PrivateContext,\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::note,\n    note::{\n        note_header::NoteHeader, note_interface::NullifiableNote,\n        utils::compute_note_hash_for_nullify,\n    },\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator, traits::Serialize,\n    },\n};\n\nglobal VALUE_NOTE_LEN: u32 = 3; // 3 plus a header.\n\n// docs:start:value-note-def\n// ValueNote is used as fn parameter in the Claim contract, so it has to implement the Serialize trait.\n// It is important that the order of these annotations is preserved so that derive(Serialize) runs AFTER the note macro, which injects the note header.\n#[note]\n#[derive(Serialize)]\npub struct ValueNote {\n    value: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NullifiableNote for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m_hash: Field = get_public_keys(self.owner).npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let owner_npk_m_hash: Field = get_public_keys(self.owner).npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: AztecAddress) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        let header = NoteHeader::empty();\n        ValueNote { value, owner, randomness, header }\n    }\n}\n\nimpl Eq for ValueNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.owner == other.owner)\n            & (self.randomness == other.randomness)\n    }\n}\n","path":"/home/john-play/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/value-note/src/value_note.nr"}}}